// THIS FILE IS AUTO-GENERATED BY vendor/codegen.rb

mod assert_scanned;

#[test]
fn test_ambiguous_integer_re_case_0() {
    assert_scanned!("1re",
                    :tINTEGER,    Some("1"),  [0, 1],
                    :tIDENTIFIER, Some("re"), [1, 3]);
}

#[test]
fn test_ambiguous_uminus_case_0() {
    assert_scanned!("m -3",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tUNARY_NUM,  Some("-"), [2, 3],
                    :tINTEGER,    Some("3"), [3, 4]);
}

#[test]
fn test_ambiguous_uplus_case_0() {
    assert_scanned!("m +3",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tUNARY_NUM,  Some("+"), [2, 3],
                    :tINTEGER,    Some("3"), [3, 4]);
}

#[test]
fn test_and_case_0() {
    assert_scanned!("&",
                    :tAMPER, Some("&"), [0, 1]);
}

#[test]
fn test_and2_case_0() {
    assert_scanned!("&&",
                    :tANDOP, Some("&&"), [0, 2]);
}

#[test]
fn test_and2_equals_case_0() {
    assert_scanned!("&&=",
                    :tOP_ASGN, Some("&&"), [0, 3]);
}

#[test]
fn test_and_arg_case_0() {
    assert_scanned!(" &y",
                    :tAMPER,      Some("&"), [1, 2],
                    :tIDENTIFIER, Some("y"), [2, 3]);
}

#[test]
fn test_and_dot_arg_case_0() {
    assert_scanned!("&.",
                    :tANDDOT, Some("&."), [0, 2]);
}

#[test]
fn test_and_dot_cmdarg_case_0() {
    assert_scanned!("&.",
                    :tANDDOT, Some("&."), [0, 2]);
}

#[test]
fn test_and_equals_case_0() {
    assert_scanned!("&=",
                    :tOP_ASGN, Some("&"), [0, 2]);
}

#[test]
fn test_and_expr_case_0() {
    assert_scanned!("x & y",
                    :tIDENTIFIER, Some("x"), [0, 1],
                    :tAMPER2,     Some("&"), [2, 3],
                    :tIDENTIFIER, Some("y"), [4, 5]);
}

#[test]
fn test_assoc_case_0() {
    assert_scanned!("=>",
                    :tASSOC, Some("=>"), [0, 2]);
}

#[test]
fn test_back_ref_case_0() {
    assert_scanned!("[$&, $`, $', $+]",
                    :tLBRACK,   Some("["),  [0, 1],
                    :tBACK_REF, Some("$&"), [1, 3],
                    :tCOMMA,    Some(","),  [3, 4],
                    :tBACK_REF, Some("$`"), [5, 7],
                    :tCOMMA,    Some(","),  [7, 8],
                    :tBACK_REF, Some("$'"), [9, 11],
                    :tCOMMA,    Some(","),  [11, 12],
                    :tBACK_REF, Some("$+"), [13, 15],
                    :tRBRACK,   Some("]"),  [15, 16]);
}

#[test]
fn test_backslash_case_0() {
    assert_scanned!("1 \\\n+ 2",
                    :tINTEGER, Some("1"), [0, 1],
                    :tPLUS,    Some("+"), [4, 5],
                    :tINTEGER, Some("2"), [6, 7]);
}

#[test]
fn test_backtick_case_0() {
    assert_scanned!("`ls`",
                    :tXSTRING_BEG,    Some("`"),  [0, 1],
                    :tSTRING_CONTENT, Some("ls"), [1, 3],
                    :tSTRING_END,     Some("`"),  [3, 4]);
}


#[test]
fn test_backtick_dot_case_0() {
    assert_scanned!("a.`(3)",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tDOT,        Some("."), [1, 2],
                    :tBACK_REF2,  Some("`"), [2, 3],
                    :tLPAREN2,    Some("("), [3, 4],
                    :tINTEGER,    Some("3"), [4, 5],
                    :tRPAREN,     Some(")"), [5, 6]);
}

#[test]
fn test_backtick_method_case_0() {
    assert_scanned!("`",
                    :tBACK_REF2, Some("`"), [0, 1]);
}

#[test]
fn test_bang_case_0() {
    assert_scanned!("!",
                    :tBANG, Some("!"), [0, 1]);
}

#[test]
fn test_bang_equals_case_0() {
    assert_scanned!("!=",
                    :tNEQ, Some("!="), [0, 2]);
}

#[test]
fn test_bang_tilde_case_0() {
    assert_scanned!("!~",
                    :tNMATCH, Some("!~"), [0, 2]);
}

#[test]
fn test_bug_407_case_0() {
    assert_scanned!("123if cond",
                    :tINTEGER,    Some("123"),  [0, 3],
                    :kIF_MOD,     Some("if"),   [3, 5],
                    :tIDENTIFIER, Some("cond"), [6, 10]);
}

#[test]
fn test_bug_407_case_1() {
    assert_scanned!("1.23if cond",
                    :tFLOAT,      Some("1.23"), [0, 4],
                    :kIF_MOD,     Some("if"),   [4, 6],
                    :tIDENTIFIER, Some("cond"), [7, 11]);
}

#[test]
fn test_bug_407_case_2() {
    assert_scanned!("123rescue cond",
                    :tINTEGER,    Some("123"),    [0, 3],
                    :kRESCUE_MOD, Some("rescue"), [3, 9],
                    :tIDENTIFIER, Some("cond"),   [10, 14]);
}

#[test]
fn test_bug_407_case_3() {
    assert_scanned!("1.23rescue cond",
                    :tFLOAT,      Some("1.23"),   [0, 4],
                    :kRESCUE_MOD, Some("rescue"), [4, 10],
                    :tIDENTIFIER, Some("cond"),   [11, 15]);
}

#[test]
fn test_bug_418_case_0() {
    assert_scanned!("{\n=begin\nx: 1,\n=end\ny: 2}",
                    :tLBRACE,  Some("{"), [0, 1],
                    :tLABEL,   Some("y"), [20, 22],
                    :tINTEGER, Some("2"), [23, 24],
                    :tRCURLY,  Some("}"), [24, 25]);
}

#[test]
fn test_bug_423_case_0() {
    assert_scanned!(":&&",
                    :tSYMBEG, Some(":"),  [0, 1],
                    :tANDOP,  Some("&&"), [1, 3]);
}

#[test]
fn test_bug_423_case_1() {
    assert_scanned!(":||",
                    :tSYMBEG, Some(":"),  [0, 1],
                    :tOROP,   Some("||"), [1, 3]);
}

#[test]
fn test_bug_const_e_case_0() {
    assert_scanned!("E10",
                    :tCONSTANT, Some("E10"), [0, 3]);
}

#[test]
fn test_bug_const_e_case_1() {
    assert_scanned!("E4U",
                    :tCONSTANT, Some("E4U"), [0, 3]);
}

#[test]
fn test_bug_const_expr_end_case_0() {
    assert_scanned!("Option",
                    :tCONSTANT, Some("Option"), [0, 6]);
}

#[test]
fn test_bug_eh_symbol_no_newline_case_0() {
    assert_scanned!("?\"\nfoo",
                    :tINTEGER,    Some("34"),  [0, 2],
                    :tNL,         None,        [2, 3],
                    :tIDENTIFIER, Some("foo"), [3, 6]);
}

#[test]
fn test_bug_eql_end_case_0() {
    assert_scanned!("=begin\n#=end\n=end",
                    );
}

#[test]
fn test_bug_expr_arg_comment_newline_case_0() {
    assert_scanned!(" #\nfoo",
                    :tNL,         None,        [2, 3],
                    :tIDENTIFIER, Some("foo"), [3, 6]);
}

#[test]
fn test_bug_expr_arg_eh_crlf_case_0() {
    assert_scanned!(" ?\r\n",
                    :tEH, Some("?"), [1, 2]);
}

#[test]
fn test_bug_expr_arg_label_case_0() {
    assert_scanned!(" unless:",
                    :tLABEL, Some("unless"), [1, 8]);
}

#[test]
fn test_bug_expr_arg_label_case_1() {
    assert_scanned!(" unless: ",
                    :tLABEL, Some("unless"), [1, 8]);
}

#[test]
fn test_bug_expr_arg_lt_lt_case_0() {
    assert_scanned!("<<EOS\nEOS",
                    :tLSHFT,    Some("<<"),  [0, 2],
                    :tCONSTANT, Some("EOS"), [2, 5],
                    :tNL,       None,        [5, 6],
                    :tCONSTANT, Some("EOS"), [6, 9]);
}

#[test]
fn test_bug_expr_arg_lt_lt_case_1() {
    assert_scanned!(" <<EOS\nEOS",
                    :tSTRING_BEG, Some("<<\""), [1, 6],
                    :tSTRING_END, Some("EOS"),  [7, 10],
                    :tNL,         None,         [6, 7]);
}


#[test]
fn test_bug_expr_arg_newline_case_1() {
    assert_scanned!(" \nfoo",
                    :tNL,         None,        [1, 2],
                    :tIDENTIFIER, Some("foo"), [2, 5]);
}

#[test]
fn test_bug_expr_arg_newline_case_2() {
    assert_scanned!("#foo\nfoo",
                    :tNL,         None,        [4, 5],
                    :tIDENTIFIER, Some("foo"), [5, 8]);
}

#[test]
fn test_bug_expr_arg_percent_case_0() {
    assert_scanned!("%[",
                    :tPERCENT, Some("%"), [0, 1],
                    :tLBRACK,  Some("["), [1, 2]);
}

#[test]
fn test_bug_expr_arg_percent_case_1() {
    assert_scanned!("%=1",
                    :tOP_ASGN, Some("%"), [0, 2],
                    :tINTEGER, Some("1"), [2, 3]);
}

#[test]
fn test_bug_expr_arg_percent_case_2() {
    assert_scanned!(" %[1]",
                    :tSTRING_BEG,     Some("%["), [1, 3],
                    :tSTRING_CONTENT, Some("1"),  [3, 4],
                    :tSTRING_END,     Some("]"),  [4, 5]);
}

#[test]
fn test_bug_expr_arg_percent_case_3() {
    assert_scanned!(" %=1=",
                    :tOP_ASGN, Some("%"), [1, 3],
                    :tINTEGER, Some("1"), [3, 4],
                    :tEQL,     Some("="), [4, 5]);
}

#[test]
fn test_bug_expr_arg_percent_case_4() {
    assert_scanned!(" %\n",
                    :tPERCENT, Some("%"), [1, 2]);
}

#[test]
fn test_bug_expr_arg_slash_case_0() {
    assert_scanned!("/1",
                    :tDIVIDE,  Some("/"), [0, 1],
                    :tINTEGER, Some("1"), [1, 2]);
}

#[test]
fn test_bug_expr_arg_slash_case_1() {
    assert_scanned!("/ 1",
                    :tDIVIDE,  Some("/"), [0, 1],
                    :tINTEGER, Some("1"), [2, 3]);
}

#[test]
fn test_bug_expr_arg_slash_case_2() {
    assert_scanned!(" /1/",
                    :tREGEXP_BEG,     Some("/"), [1, 2],
                    :tSTRING_CONTENT, Some("1"), [2, 3],
                    :tSTRING_END,     Some("/"), [3, 4],
                    :tREGEXP_OPT,     Some(""),  [4, 4]);
}

#[test]
fn test_bug_expr_arg_slash_case_3() {
    assert_scanned!(" / 1",
                    :tDIVIDE,  Some("/"), [1, 2],
                    :tINTEGER, Some("1"), [3, 4]);
}


#[test]
fn test_bug_expr_beg_div_case_0() {
    assert_scanned!("/=/",
                    :tREGEXP_BEG,     Some("/"), [0, 1],
                    :tSTRING_CONTENT, Some("="), [1, 2],
                    :tSTRING_END,     Some("/"), [2, 3],
                    :tREGEXP_OPT,     Some(""),  [3, 3]);
}

#[test]
fn test_bug_expr_beg_div_case_1() {
    assert_scanned!("/ = /",
                    :tREGEXP_BEG,     Some("/"),   [0, 1],
                    :tSTRING_CONTENT, Some(" = "), [1, 4],
                    :tSTRING_END,     Some("/"),   [4, 5],
                    :tREGEXP_OPT,     Some(""),    [5, 5]);
}

#[test]
fn test_bug_expr_beg_document_case_0() {
    assert_scanned!(" \n=begin\n=end\nend",
                    :kEND, Some("end"), [14, 17]);
}

#[test]
fn test_bug_expr_beg_fid_case_0() {
    assert_scanned!("Rainbows!",
                    :tFID, Some("Rainbows!"), [0, 9]);
}

#[test]
fn test_bug_expr_beg_heredoc_case_0() {
    assert_scanned!("<<EOL % [\nfoo\nEOL\n]",
                    :tSTRING_BEG,     Some("<<\""),  [0, 5],
                    :tSTRING_CONTENT, Some("foo\n"), [10, 14],
                    :tSTRING_END,     Some("EOL"),   [14, 17],
                    :tPERCENT,        Some("%"),     [6, 7],
                    :tLBRACK,         Some("["),     [8, 9],
                    :tRBRACK,         Some("]"),     [18, 19]);
}

#[test]
fn test_bug_expr_beg_number_case_0() {
    assert_scanned!("86400_000_000",
                    :tINTEGER, Some("86400000000"), [0, 13]);
}

#[test]
fn test_bug_expr_beg_percent_case_0() {
    assert_scanned!("%=foo=",
                    :tSTRING_BEG,     Some("%="),  [0, 2],
                    :tSTRING_CONTENT, Some("foo"), [2, 5],
                    :tSTRING_END,     Some("="),   [5, 6]);
}

#[test]
fn test_bug_expr_beg_percent_case_1() {
    assert_scanned!("% = ",
                    :tSTRING_BEG,     Some("% "), [0, 2],
                    :tSTRING_CONTENT, Some("="),  [2, 3],
                    :tSTRING_END,     Some(" "),  [3, 4]);
}

#[test]
fn test_bug_expr_beg_rescue_assoc_case_0() {
    assert_scanned!("rescue=>",
                    :kRESCUE, Some("rescue"), [0, 6],
                    :tASSOC,  Some("=>"),     [6, 8]);
}

#[test]
fn test_bug_expr_dot_comment_case_0() {
    assert_scanned!("foo. #bar\nbaz",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tDOT,        Some("."),   [3, 4],
                    :tIDENTIFIER, Some("baz"), [10, 13]);
}

#[test]
fn test_bug_expr_dot_fid_case_0() {
    assert_scanned!("foo.S?",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tDOT,        Some("."),   [3, 4],
                    :tFID,        Some("S?"),  [4, 6]);
}

#[test]
fn test_bug_expr_dot_fid_mod_case_0() {
    assert_scanned!("foo.x!if 1",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tDOT,        Some("."),   [3, 4],
                    :tFID,        Some("x!"),  [4, 6],
                    :kIF_MOD,     Some("if"),  [6, 8],
                    :tINTEGER,    Some("1"),   [9, 10]);
}

#[test]
fn test_bug_expr_dot_id_eq_case_0() {
    assert_scanned!("foo.x= 1",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tDOT,        Some("."),   [3, 4],
                    :tIDENTIFIER, Some("x"),   [4, 5],
                    :tEQL,        Some("="),   [5, 6],
                    :tINTEGER,    Some("1"),   [7, 8]);
}

#[test]
fn test_bug_expr_end_colon_case_0() {
    assert_scanned!("'foo':'bar'",
                    :tSTRING, Some("foo"), [0, 5],
                    :tCOLON,  Some(":"),   [5, 6],
                    :tSTRING, Some("bar"), [6, 11]);
}

#[test]
fn test_bug_expr_endarg_braces_case_0() {
    assert_scanned!("let [] {",
                    :tIDENTIFIER, Some("let"), [0, 3],
                    :tLBRACK,     Some("["),   [4, 5],
                    :tRBRACK,     Some("]"),   [5, 6],
                    :tLBRACE_ARG, Some("{"),   [7, 8]);
}

#[test]
fn test_bug_expr_mid_bareword_case_0() {
    assert_scanned!("begin; rescue rescue1",
                    :kBEGIN,      Some("begin"),   [0, 5],
                    :tSEMI,       Some(";"),       [5, 6],
                    :kRESCUE,     Some("rescue"),  [7, 13],
                    :tIDENTIFIER, Some("rescue1"), [14, 21]);
}

#[test]
fn test_bug_expr_mid_comment_case_0() {
    assert_scanned!("rescue #bar\nprint",
                    :kRESCUE,     Some("rescue"), [0, 6],
                    :tNL,         None,           [11, 12],
                    :tIDENTIFIER, Some("print"),  [12, 17]);
}

#[test]
fn test_bug_expr_value_document_case_0() {
    assert_scanned!("1;\n=begin\n=end",
                    :tINTEGER, Some("1"), [0, 1],
                    :tSEMI,    Some(";"), [1, 2]);
}

#[test]
fn test_bug_expr_value_rescue_colon2_case_0() {
    assert_scanned!("rescue::Exception",
                    :kRESCUE,   Some("rescue"),    [0, 6],
                    :tCOLON3,   Some("::"),        [6, 8],
                    :tCONSTANT, Some("Exception"), [8, 17]);
}

#[test]
fn test_bug_fid_char_case_0() {
    assert_scanned!("eof??a",
                    :tFID,       Some("eof?"), [0, 4],
                    :tCHARACTER, Some("a"),    [4, 6]);
}

#[test]
fn test_bug_heredoc_backspace_nl_case_0() {
    assert_scanned!(" <<'XXX'\nf \\\nXXX\n",
                    :tSTRING_BEG,     Some("<<'"),    [1, 8],
                    :tSTRING_CONTENT, Some("f \\\n"), [9, 13],
                    :tSTRING_END,     Some("XXX"),    [13, 16],
                    :tNL,             None,           [8, 9]);
}

#[test]
fn test_bug_heredoc_continuation_case_0() {
    assert_scanned!(" <<EOS\nEOS\nend",
                    :tSTRING_BEG, Some("<<\""), [1, 6],
                    :tSTRING_END, Some("EOS"),  [7, 10],
                    :tNL,         None,         [6, 7],
                    :kEND,        Some("end"),  [11, 14]);
}

#[test]
fn test_bug_heredoc_cr_lf_case_0() {
    assert_scanned!("<<FIN\r\nfoo\r\nFIN\r\n",
                    :tSTRING_BEG,     Some("<<\""),  [0, 5],
                    :tSTRING_CONTENT, Some("foo\n"), [6, 10],
                    :tSTRING_END,     Some("FIN"),   [10, 13],
                    :tNL,             None,          [5, 6]);
}

#[test]
fn test_bug_heredoc_lshft_case_0() {
    assert_scanned!("<<RULES << CLEANINGS\nRULES",
                    :tSTRING_BEG, Some("<<\""),      [0, 7],
                    :tSTRING_END, Some("RULES"),     [21, 26],
                    :tLSHFT,      Some("<<"),        [8, 10],
                    :tCONSTANT,   Some("CLEANINGS"), [11, 20]);
}

#[test]
fn test_bug_hidden_eof_case_0() {
    assert_scanned!("\"foo\u{0000}\u{001A}\u{0004}bar\"",
                    :tSTRING_BEG,     Some("\""),          [0, 1],
                    :tSTRING_CONTENT, Some("foo\u{0000}"), [1, 5],
                    :tSTRING_CONTENT, Some("\u{001A}"),    [5, 6],
                    :tSTRING_CONTENT, Some("\u{0004}"),    [6, 7],
                    :tSTRING_CONTENT, Some("bar"),         [7, 10],
                    :tSTRING_END,     Some("\""),          [10, 11]);
}

#[test]
fn test_bug_hidden_eof_case_1() {
    assert_scanned!("'foo\u{0000}\u{001A}\u{0004}bar'",
                    :tSTRING_BEG,     Some("'"),           [0, 1],
                    :tSTRING_CONTENT, Some("foo\u{0000}"), [1, 5],
                    :tSTRING_CONTENT, Some("\u{001A}"),    [5, 6],
                    :tSTRING_CONTENT, Some("\u{0004}"),    [6, 7],
                    :tSTRING_CONTENT, Some("bar"),         [7, 10],
                    :tSTRING_END,     Some("'"),           [10, 11]);
}

#[test]
fn test_bug_hidden_eof_case_2() {
    assert_scanned!("%w[foo\u{0000}\u{001A}\u{0004}bar]",
                    :tQWORDS_BEG,     Some("%w["),         [0, 3],
                    :tSTRING_CONTENT, Some("foo\u{0000}"), [3, 7],
                    :tSTRING_CONTENT, Some("\u{001A}"),    [7, 8],
                    :tSTRING_CONTENT, Some("\u{0004}"),    [8, 9],
                    :tSTRING_CONTENT, Some("bar"),         [9, 12],
                    :tSPACE,          None,                [12, 12],
                    :tSTRING_END,     Some("]"),           [12, 13]);
}

#[test]
fn test_bug_hidden_eof_case_3() {
    assert_scanned!("%W[foo\u{0000}\u{001A}\u{0004}bar]",
                    :tWORDS_BEG,      Some("%W["),         [0, 3],
                    :tSTRING_CONTENT, Some("foo\u{0000}"), [3, 7],
                    :tSTRING_CONTENT, Some("\u{001A}"),    [7, 8],
                    :tSTRING_CONTENT, Some("\u{0004}"),    [8, 9],
                    :tSTRING_CONTENT, Some("bar"),         [9, 12],
                    :tSPACE,          None,                [12, 12],
                    :tSTRING_END,     Some("]"),           [12, 13]);
}

#[test]
fn test_bug_hidden_eof_case_4() {
    assert_scanned!("# foo\u{0000}\nbar",
                    :tIDENTIFIER, Some("bar"), [7, 10]);
}

#[test]
fn test_bug_hidden_eof_case_5() {
    assert_scanned!("=begin\n\u{0000}\n=end\nbar",
                    :tIDENTIFIER, Some("bar"), [14, 17]);
}

#[test]
fn test_bug_interleaved_heredoc_case_0() {
    assert_scanned!("<<w; \"\nfoo\nw\n\"",
                    :tSTRING_BEG,     Some("<<\""),  [0, 3],
                    :tSTRING_CONTENT, Some("foo\n"), [7, 11],
                    :tSTRING_END,     Some("w"),     [11, 12],
                    :tSEMI,           Some(";"),     [3, 4],
                    :tSTRING_BEG,     Some("\""),    [5, 6],
                    :tSTRING_CONTENT, Some("\n"),    [6, 7],
                    :tSTRING_END,     Some("\""),    [13, 14]);
}

#[test]
fn test_bug_interleaved_heredoc_case_1() {
    assert_scanned!("<<w; %w[\nfoo\nw\n1]",
                    :tSTRING_BEG,     Some("<<\""),  [0, 3],
                    :tSTRING_CONTENT, Some("foo\n"), [9, 13],
                    :tSTRING_END,     Some("w"),     [13, 14],
                    :tSEMI,           Some(";"),     [3, 4],
                    :tQWORDS_BEG,     Some("%w["),   [5, 8],
                    :tSTRING_CONTENT, Some("1"),     [15, 16],
                    :tSPACE,          None,          [16, 16],
                    :tSTRING_END,     Some("]"),     [16, 17]);
}

#[test]
fn test_bug_interleaved_heredoc_case_2() {
    assert_scanned!("<<w; \"#{\nfoo\nw\n}\"",
                    :tSTRING_BEG,     Some("<<\""),  [0, 3],
                    :tSTRING_CONTENT, Some("foo\n"), [9, 13],
                    :tSTRING_END,     Some("w"),     [13, 14],
                    :tSEMI,           Some(";"),     [3, 4],
                    :tSTRING_BEG,     Some("\""),    [5, 6],
                    :tSTRING_DBEG,    Some("#{"),    [6, 8],
                    :tRCURLY,         Some("}"),     [15, 16],
                    :tSTRING_END,     Some("\""),    [16, 17]);
}

#[test]
fn test_bug_interp_expr_value_case_0() {
    assert_scanned!("\"#{f:a}\"",
                    :tSTRING_BEG,  Some("\""), [0, 1],
                    :tSTRING_DBEG, Some("#{"), [1, 3],
                    :tIDENTIFIER,  Some("f"),  [3, 4],
                    :tSYMBOL,      Some("a"),  [4, 6],
                    :tRCURLY,      Some("}"),  [6, 7],
                    :tSTRING_END,  Some("\""), [7, 8]);
}

#[test]
fn test_bug_line_begin_label_case_0() {
    assert_scanned!("foo:bar",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tSYMBOL,     Some("bar"), [3, 7]);
}

#[test]
fn test_bug_nonlabel_context_18_case_0() {
    assert_scanned!("1+a:a",
                    :tINTEGER,    Some("1"), [0, 1],
                    :tPLUS,       Some("+"), [1, 2],
                    :tIDENTIFIER, Some("a"), [2, 3],
                    :tCOLON,      Some(":"), [3, 4],
                    :tIDENTIFIER, Some("a"), [4, 5]);
}

#[test]
fn test_bug_num_adj_kw_case_0() {
    assert_scanned!("1if",
                    :tINTEGER, Some("1"),  [0, 1],
                    :kIF_MOD,  Some("if"), [1, 3]);
}

#[test]
fn test_bug_num_adj_kw_case_1() {
    assert_scanned!("1.0if",
                    :tFLOAT,  Some("1.0"), [0, 3],
                    :kIF_MOD, Some("if"),  [3, 5]);
}

#[test]
fn test_bug_ragel_stack_case_0() {
    assert_scanned!("\"#{$2 ? $2 : 1}\"",
                    :tSTRING_BEG,  Some("\""), [0, 1],
                    :tSTRING_DBEG, Some("#{"), [1, 3],
                    :tNTH_REF,     Some("2"),  [3, 5],
                    :tEH,          Some("?"),  [6, 7],
                    :tNTH_REF,     Some("2"),  [8, 10],
                    :tCOLON,       Some(":"),  [11, 12],
                    :tINTEGER,     Some("1"),  [13, 14],
                    :tRCURLY,      Some("}"),  [14, 15],
                    :tSTRING_END,  Some("\""), [15, 16]);
}

#[test]
fn test_bug_sclass_comment_lshft_label_case_0() {
    assert_scanned!("class # foo\n<< a:b;end",
                    :kCLASS,      Some("class"), [0, 5],
                    :tLSHFT,      Some("<<"),    [12, 14],
                    :tIDENTIFIER, Some("a"),     [15, 16],
                    :tSYMBOL,     Some("b"),     [16, 18],
                    :tSEMI,       Some(";"),     [18, 19],
                    :kEND,        Some("end"),   [19, 22]);
}

#[test]
fn test_bug_sclass_joined_case_0() {
    assert_scanned!("class<<self",
                    :kCLASS, Some("class"), [0, 5],
                    :tLSHFT, Some("<<"),    [5, 7],
                    :kSELF,  Some("self"),  [7, 11]);
}

#[test]
fn test_bug_semi_end_upper_case_0() {
    assert_scanned!("foo;\n__END__",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tSEMI,       Some(";"),   [3, 4]);
}


#[test]
fn test_bug_string_non_utf_case_1() {
    assert_scanned!("\"café\"",
                    :tSTRING, Some("café"), [0, 7]);
}

#[test]
fn test_bug_string_non_utf_case_2() {
    assert_scanned!("\"café\"",
                    :tSTRING, Some("café"), [0, 6]);
}

#[test]
fn test_bug_string_percent_newline_case_0() {
    assert_scanned!("%\nfoo\n",
                    :tSTRING_BEG,     Some("%\n"), [0, 2],
                    :tSTRING_CONTENT, Some("foo"), [2, 5],
                    :tSTRING_END,     Some("\n"),  [5, 6]);
}

#[test]
fn test_bug_string_percent_zero_case_0() {
    assert_scanned!("%\u{0000}foo\u{0000}",
                    :tSTRING_BEG,     Some("%\u{0000}"), [0, 2],
                    :tSTRING_CONTENT, Some("foo"),       [2, 5],
                    :tSTRING_END,     Some("\u{0000}"),  [5, 6]);
}

#[test]
fn test_bug_string_utf_escape_composition_case_0() {
    assert_scanned!("\"\\xE2\\x80\\x99\"",
                    :tSTRING, Some("’"), [0, 14]);
}

#[test]
fn test_bug_string_utf_escape_composition_case_1() {
    assert_scanned!("\"\\xE2\\x80\\x99\"",
                    :tSTRING, Some("’"), [0, 14]);
}

#[test]
fn test_bug_string_utf_escape_composition_case_2() {
    assert_scanned!("\"\\342\\200\\231\"",
                    :tSTRING, Some("’"), [0, 14]);
}

#[test]
fn test_bug_string_utf_escape_composition_case_3() {
    assert_scanned!("\"\\M-b\\C-\\M-@\\C-\\M-Y\"",
                    :tSTRING, Some("’"), [0, 20]);
}

#[test]
fn test_bug_string_utf_escape_noop_case_0() {
    assert_scanned!("\"\\あ\"",
                    :tSTRING, Some("あ"), [0, 4]);
}

#[test]
fn test_bug_symbol_newline_case_0() {
    assert_scanned!(":foo\n",
                    :tSYMBOL, Some("foo"), [0, 4],
                    :tNL,     None,        [4, 5]);
}

#[test]
fn test_bug_symbol_newline_case_1() {
    assert_scanned!(":foo=\n",
                    :tSYMBOL, Some("foo="), [0, 5],
                    :tNL,     None,         [5, 6]);
}

#[test]
fn test_bug_unicode_in_literal_case_0() {
    assert_scanned!("\"\\u{00a4}\"",
                    :tSTRING, Some("¤"), [0, 8]);
}

#[test]
fn test_bug_utf32le_leak_case_0() {
    assert_scanned!("\"F0\"",
                    :tSTRING, Some("F0"), [0, 4]);
}

#[test]
fn test_carat_case_0() {
    assert_scanned!("^",
                    :tCARET, Some("^"), [0, 1]);
}

#[test]
fn test_carat_equals_case_0() {
    assert_scanned!("^=",
                    :tOP_ASGN, Some("^"), [0, 2]);
}

#[test]
fn test_colon2_case_0() {
    assert_scanned!("A::B",
                    :tCONSTANT, Some("A"),  [0, 1],
                    :tCOLON2,   Some("::"), [1, 3],
                    :tCONSTANT, Some("B"),  [3, 4]);
}

#[test]
fn test_colon2_case_1() {
    assert_scanned!("::Array",
                    :tCOLON2,   Some("::"),    [0, 2],
                    :tCONSTANT, Some("Array"), [2, 7]);
}

#[test]
fn test_colon3_case_0() {
    assert_scanned!("::Array",
                    :tCOLON3,   Some("::"),    [0, 2],
                    :tCONSTANT, Some("Array"), [2, 7]);
}

#[test]
fn test_colon3_case_1() {
    assert_scanned!(" ::Array",
                    :tCOLON3,   Some("::"),    [1, 3],
                    :tCONSTANT, Some("Array"), [3, 8]);
}

#[test]
fn test_comma_case_0() {
    assert_scanned!(",",
                    :tCOMMA, Some(","), [0, 1]);
}

#[test]
fn test_command_start_19_case_0() {
    assert_scanned!("case a:b",
                    :kCASE,       Some("case"), [0, 4],
                    :tIDENTIFIER, Some("a"),    [5, 6],
                    :tSYMBOL,     Some("b"),    [6, 8]);
}

#[test]
fn test_command_start_19_case_1() {
    assert_scanned!("elsif a:b",
                    :kELSIF,      Some("elsif"), [0, 5],
                    :tIDENTIFIER, Some("a"),     [6, 7],
                    :tSYMBOL,     Some("b"),     [7, 9]);
}

#[test]
fn test_command_start_19_case_2() {
    assert_scanned!("for a:b",
                    :kFOR,        Some("for"), [0, 3],
                    :tIDENTIFIER, Some("a"),   [4, 5],
                    :tSYMBOL,     Some("b"),   [5, 7]);
}

#[test]
fn test_command_start_19_case_3() {
    assert_scanned!("in a:b",
                    :kIN,         Some("in"), [0, 2],
                    :tIDENTIFIER, Some("a"),  [3, 4],
                    :tSYMBOL,     Some("b"),  [4, 6]);
}

#[test]
fn test_command_start_19_case_4() {
    assert_scanned!("until a:b",
                    :kUNTIL,      Some("until"), [0, 5],
                    :tIDENTIFIER, Some("a"),     [6, 7],
                    :tSYMBOL,     Some("b"),     [7, 9]);
}

#[test]
fn test_command_start_19_case_5() {
    assert_scanned!("when a:b",
                    :kWHEN,       Some("when"), [0, 4],
                    :tIDENTIFIER, Some("a"),    [5, 6],
                    :tSYMBOL,     Some("b"),    [6, 8]);
}

#[test]
fn test_command_start_19_case_6() {
    assert_scanned!("while a:b",
                    :kWHILE,      Some("while"), [0, 5],
                    :tIDENTIFIER, Some("a"),     [6, 7],
                    :tSYMBOL,     Some("b"),     [7, 9]);
}

#[test]
fn test_command_start_19_case_7() {
    assert_scanned!("if a:b",
                    :kIF,         Some("if"), [0, 2],
                    :tIDENTIFIER, Some("a"),  [3, 4],
                    :tSYMBOL,     Some("b"),  [4, 6]);
}

#[test]
fn test_command_start_19_case_8() {
    assert_scanned!("unless a:b",
                    :kUNLESS,     Some("unless"), [0, 6],
                    :tIDENTIFIER, Some("a"),      [7, 8],
                    :tSYMBOL,     Some("b"),      [8, 10]);
}

#[test]
fn test_command_start_19_case_9() {
    assert_scanned!("and a:b",
                    :kAND,        Some("and"), [0, 3],
                    :tIDENTIFIER, Some("a"),   [4, 5],
                    :tSYMBOL,     Some("b"),   [5, 7]);
}

#[test]
fn test_command_start_19_case_10() {
    assert_scanned!("or a:b",
                    :kOR,         Some("or"), [0, 2],
                    :tIDENTIFIER, Some("a"),  [3, 4],
                    :tSYMBOL,     Some("b"),  [4, 6]);
}

#[test]
fn test_comment_begin_not_comment_case_0() {
    assert_scanned!("beginfoo = 5\np x \\\n=beginfoo",
                    :tIDENTIFIER, Some("beginfoo"), [0, 8],
                    :tEQL,        Some("="),        [9, 10],
                    :tINTEGER,    Some("5"),        [11, 12],
                    :tNL,         None,             [12, 13],
                    :tIDENTIFIER, Some("p"),        [13, 14],
                    :tIDENTIFIER, Some("x"),        [15, 16],
                    :tEQL,        Some("="),        [19, 20],
                    :tIDENTIFIER, Some("beginfoo"), [20, 28]);
}

#[test]
fn test_comment_expr_beg_case_0() {
    assert_scanned!("{#1\n}",
                    :tLBRACE, Some("{"), [0, 1],
                    :tRCURLY, Some("}"), [4, 5]);
}

#[test]
fn test_constant_case_0() {
    assert_scanned!("ArgumentError",
                    :tCONSTANT, Some("ArgumentError"), [0, 13]);
}

#[test]
fn test_constant_semi_case_0() {
    assert_scanned!("ArgumentError;",
                    :tCONSTANT, Some("ArgumentError"), [0, 13],
                    :tSEMI,     Some(";"),             [13, 14]);
}

#[test]
fn test_cvar_case_0() {
    assert_scanned!("@@blah",
                    :tCVAR, Some("@@blah"), [0, 6]);
}

#[test]
fn test_def_ubang_case_0() {
    assert_scanned!("!@",
                    :tBANG, Some("!@"), [0, 2]);
}

#[test]
fn test_div_case_0() {
    assert_scanned!("a / 2",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tDIVIDE,     Some("/"), [2, 3],
                    :tINTEGER,    Some("2"), [4, 5]);
}

#[test]
fn test_div_equals_case_0() {
    assert_scanned!("a /= 2",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tOP_ASGN,    Some("/"), [2, 4],
                    :tINTEGER,    Some("2"), [5, 6]);
}

#[test]
fn test_do_case_0() {
    assert_scanned!("x do 42 end",
                    :tIDENTIFIER, Some("x"),   [0, 1],
                    :kDO,         Some("do"),  [2, 4],
                    :tINTEGER,    Some("42"),  [5, 7],
                    :kEND,        Some("end"), [8, 11]);
}

#[test]
fn test_do_block_case_0() {
    assert_scanned!("do 42 end",
                    :kDO_BLOCK, Some("do"),  [0, 2],
                    :tINTEGER,  Some("42"),  [3, 5],
                    :kEND,      Some("end"), [6, 9]);
}

#[test]
fn test_do_cond_case_0() {
    assert_scanned!("x do 42 end",
                    :tIDENTIFIER, Some("x"),   [0, 1],
                    :kDO_COND,    Some("do"),  [2, 4],
                    :tINTEGER,    Some("42"),  [5, 7],
                    :kEND,        Some("end"), [8, 11]);
}

#[test]
fn test_dot_case_0() {
    assert_scanned!(".",
                    :tDOT, Some("."), [0, 1]);
}

#[test]
fn test_dot2_case_0() {
    assert_scanned!("..",
                    :tDOT2, Some(".."), [0, 2]);
}

#[test]
fn test_dot3_case_0() {
    assert_scanned!("...",
                    :tDOT3, Some("..."), [0, 3]);
}

#[test]
fn test_endless_method_case_0() {
    assert_scanned!("def foo() = 42",
                    :kDEF,        Some("def"), [0, 3],
                    :tIDENTIFIER, Some("foo"), [4, 7],
                    :tLPAREN2,    Some("("),   [7, 8],
                    :tRPAREN,     Some(")"),   [8, 9],
                    :tEQL,        Some("="),   [10, 11],
                    :tINTEGER,    Some("42"),  [12, 14]);
}

#[test]
fn test_eof_case_0() {
    assert_scanned!("self",
                    :kSELF, Some("self"), [0, 4]);
}

#[test]
fn test_equals_case_0() {
    assert_scanned!("=",
                    :tEQL, Some("="), [0, 1]);
}

#[test]
fn test_equals2_case_0() {
    assert_scanned!("==",
                    :tEQ, Some("=="), [0, 2]);
}

#[test]
fn test_equals3_case_0() {
    assert_scanned!("===",
                    :tEQQ, Some("==="), [0, 3]);
}

#[test]
fn test_equals_tilde_case_0() {
    assert_scanned!("=~",
                    :tMATCH, Some("=~"), [0, 2]);
}

#[test]
fn test_escapes_in_squiggly_heredoc_case_0() {
    assert_scanned!("<<~E\n\x07\x08\x1b\x0c\r\t\\\x0b\nE",
                    :tSTRING_BEG,     Some("<<\""),                       [0, 4],
                    :tSTRING_CONTENT, Some("\x07\x08\x1b\x0c\r\t\x0b\n"), [5, 14],
                    :tSTRING_END,     Some("E"),                          [14, 15],
                    :tNL,             None,                               [4, 5]);
}

#[test]
fn test_escapes_in_squiggly_heredoc_case_1() {
    assert_scanned!("<<-E\n\x07\x08\x1b\x0c\r\t\\\x0b\nE",
                    :tSTRING_BEG,     Some("<<\""),                       [0, 4],
                    :tSTRING_CONTENT, Some("\x07\x08\x1b\x0c\r\t\x0b\n"), [5, 14],
                    :tSTRING_END,     Some("E"),                          [14, 15],
                    :tNL,             None,                               [4, 5]);
}

#[test]
fn test_float_case_0() {
    assert_scanned!("1.0",
                    :tFLOAT, Some("1.0"), [0, 3]);
}

#[test]
fn test_float_call_case_0() {
    assert_scanned!("1.0.to_s",
                    :tFLOAT,      Some("1.0"),  [0, 3],
                    :tDOT,        Some("."),    [3, 4],
                    :tIDENTIFIER, Some("to_s"), [4, 8]);
}

#[test]
fn test_float_dot_e_upper_case_0() {
    assert_scanned!("1.0E10",
                    :tFLOAT, Some("10000000000.0"), [0, 6]);
}

#[test]
fn test_float_dot_e_upper_neg_case_0() {
    assert_scanned!("-1.0E10",
                    :tUNARY_NUM, Some("-"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 7]);
}

#[test]
fn test_float_dot_e_upper_pos_case_0() {
    assert_scanned!("+1.0E10",
                    :tUNARY_NUM, Some("+"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 7]);
}

#[test]
fn test_float_dot_e_case_0() {
    assert_scanned!("1.0e10",
                    :tFLOAT, Some("10000000000.0"), [0, 6]);
}

#[test]
fn test_float_dot_e_neg_case_0() {
    assert_scanned!("-1.0e10",
                    :tUNARY_NUM, Some("-"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 7]);
}

#[test]
fn test_float_dot_e_pos_case_0() {
    assert_scanned!("+1.0e10",
                    :tUNARY_NUM, Some("+"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 7]);
}

#[test]
fn test_float_e_case_0() {
    assert_scanned!("1e10",
                    :tFLOAT, Some("10000000000.0"), [0, 4]);
}

#[test]
fn test_float_e_minus_case_0() {
    assert_scanned!("1e-10",
                    :tFLOAT, Some("1.0e-10"), [0, 5]);
}

#[test]
fn test_float_e_neg_case_0() {
    assert_scanned!("-1e10",
                    :tUNARY_NUM, Some("-"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 5]);
}

#[test]
fn test_float_e_neg_minus_case_0() {
    assert_scanned!("-1e-10",
                    :tUNARY_NUM, Some("-"),       [0, 1],
                    :tFLOAT,     Some("1.0e-10"), [1, 6]);
}

#[test]
fn test_float_e_neg_plus_case_0() {
    assert_scanned!("-1e+10",
                    :tUNARY_NUM, Some("-"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 6]);
}

#[test]
fn test_float_e_nothing_case_0() {
    assert_scanned!("1end",
                    :tINTEGER, Some("1"),   [0, 1],
                    :kEND,     Some("end"), [1, 4]);
}

#[test]
fn test_float_e_nothing_case_1() {
    assert_scanned!("1.1end",
                    :tFLOAT, Some("1.1"), [0, 3],
                    :kEND,   Some("end"), [3, 6]);
}

#[test]
fn test_float_e_plus_case_0() {
    assert_scanned!("1e+10",
                    :tFLOAT, Some("10000000000.0"), [0, 5]);
}

#[test]
fn test_float_e_pos_case_0() {
    assert_scanned!("+1e10",
                    :tUNARY_NUM, Some("+"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 5]);
}

#[test]
fn test_float_e_pos_minus_case_0() {
    assert_scanned!("+1e-10",
                    :tUNARY_NUM, Some("+"),       [0, 1],
                    :tFLOAT,     Some("1.0e-10"), [1, 6]);
}

#[test]
fn test_float_e_pos_plus_case_0() {
    assert_scanned!("+1e+10",
                    :tUNARY_NUM, Some("+"),             [0, 1],
                    :tFLOAT,     Some("10000000000.0"), [1, 6]);
}

#[test]
fn test_float_e_zero_case_0() {
    assert_scanned!("0e0",
                    :tFLOAT, Some("0.0"), [0, 3]);
}

#[test]
fn test_float_neg_case_0() {
    assert_scanned!("-1.0",
                    :tUNARY_NUM, Some("-"),   [0, 1],
                    :tFLOAT,     Some("1.0"), [1, 4]);
}

#[test]
fn test_float_pos_case_0() {
    assert_scanned!("+1.0",
                    :tUNARY_NUM, Some("+"),   [0, 1],
                    :tFLOAT,     Some("1.0"), [1, 4]);
}

#[test]
fn test_float_suffix_case_0() {
    assert_scanned!("42.1r",
                    :tFLOAT,      Some("42.1"), [0, 4],
                    :tIDENTIFIER, Some("r"),    [4, 5]);
}

#[test]
fn test_float_suffix_case_1() {
    assert_scanned!("42.1if",
                    :tFLOAT,  Some("42.1"), [0, 4],
                    :kIF_MOD, Some("if"),   [4, 6]);
}

#[test]
fn test_float_suffix_case_2() {
    assert_scanned!("1e1r",
                    :tFLOAT,      Some("10.0"), [0, 3],
                    :tIDENTIFIER, Some("r"),    [3, 4]);
}

#[test]
fn test_float_suffix_case_3() {
    assert_scanned!("42.1r",
                    :tFLOAT,      Some("42.1"), [0, 4],
                    :tIDENTIFIER, Some("r"),    [4, 5]);
}

#[test]
fn test_float_suffix_case_4() {
    assert_scanned!("42.1if",
                    :tFLOAT,  Some("42.1"), [0, 4],
                    :kIF_MOD, Some("if"),   [4, 6]);
}

#[test]
fn test_float_suffix_case_5() {
    assert_scanned!("1e1r",
                    :tFLOAT,      Some("10.0"), [0, 3],
                    :tIDENTIFIER, Some("r"),    [3, 4]);
}

#[test]
fn test_float_suffix_case_6() {
    assert_scanned!("42.1r",
                    :tFLOAT,      Some("42.1"), [0, 4],
                    :tIDENTIFIER, Some("r"),    [4, 5]);
}

#[test]
fn test_float_suffix_case_7() {
    assert_scanned!("42.1if",
                    :tFLOAT,  Some("42.1"), [0, 4],
                    :kIF_MOD, Some("if"),   [4, 6]);
}

#[test]
fn test_float_suffix_case_8() {
    assert_scanned!("1e1r",
                    :tFLOAT,      Some("10.0"), [0, 3],
                    :tIDENTIFIER, Some("r"),    [3, 4]);
}

#[test]
fn test_float_suffix_case_9() {
    assert_scanned!("42.1r",
                    :tRATIONAL, Some("421/10"), [0, 5]);
}

#[test]
fn test_float_suffix_case_10() {
    assert_scanned!("42.1i",
                    :tIMAGINARY, Some("0+42.1i"), [0, 5]);
}

#[test]
fn test_float_suffix_case_11() {
    assert_scanned!("42.1ri",
                    :tIMAGINARY, Some("0+421/10i"), [0, 6]);
}

#[test]
fn test_float_suffix_case_12() {
    assert_scanned!("42.1ir",
                    :tIMAGINARY,  Some("0+42.1i"), [0, 5],
                    :tIDENTIFIER, Some("r"),       [5, 6]);
}

#[test]
fn test_float_suffix_case_13() {
    assert_scanned!("1e1i",
                    :tIMAGINARY, Some("0+10.0i"), [0, 4]);
}

#[test]
fn test_float_suffix_case_14() {
    assert_scanned!("1e1r",
                    :tFLOAT,      Some("10.0"), [0, 3],
                    :tIDENTIFIER, Some("r"),    [3, 4]);
}

#[test]
fn test_float_suffix_case_15() {
    assert_scanned!("1e1ri",
                    :tFLOAT,      Some("10.0"), [0, 3],
                    :tIDENTIFIER, Some("ri"),   [3, 5]);
}

#[test]
fn test_float_suffix_case_16() {
    assert_scanned!("1e1ir",
                    :tIMAGINARY,  Some("0+10.0i"), [0, 4],
                    :tIDENTIFIER, Some("r"),       [4, 5]);
}

#[test]
fn test_fluent_and_dot_case_0() {
    assert_scanned!("x\n&.y",
                    :tIDENTIFIER, Some("x"),  [0, 1],
                    :tANDDOT,     Some("&."), [2, 4],
                    :tIDENTIFIER, Some("y"),  [4, 5]);
}

#[test]
fn test_fluent_dot_case_0() {
    assert_scanned!("x\n.y",
                    :tIDENTIFIER, Some("x"), [0, 1],
                    :tDOT,        Some("."), [2, 3],
                    :tIDENTIFIER, Some("y"), [3, 4]);
}

#[test]
fn test_fluent_dot_case_1() {
    assert_scanned!("x\n  .y",
                    :tIDENTIFIER, Some("x"), [0, 1],
                    :tDOT,        Some("."), [4, 5],
                    :tIDENTIFIER, Some("y"), [5, 6]);
}

#[test]
fn test_fluent_dot_case_2() {
    assert_scanned!("x # comment\n  .y",
                    :tIDENTIFIER, Some("x"), [0, 1],
                    :tDOT,        Some("."), [14, 15],
                    :tIDENTIFIER, Some("y"), [15, 16]);
}

#[test]
fn test_fname_pct_s_22_case_0() {
    assert_scanned!("%s(a)",
                    :tPERCENT,    Some("%"), [0, 1],
                    :tIDENTIFIER, Some("s"), [1, 2],
                    :tLPAREN2,    Some("("), [2, 3],
                    :tIDENTIFIER, Some("a"), [3, 4],
                    :tRPAREN,     Some(")"), [4, 5]);
}

#[test]
fn test_fname_pct_s_23_case_0() {
    assert_scanned!("%s(a)",
                    :tSYMBEG,         Some("%s("), [0, 3],
                    :tSTRING_CONTENT, Some("a"),   [3, 4],
                    :tSTRING_END,     Some(")"),   [4, 5]);
}

#[test]
fn test_ge_case_0() {
    assert_scanned!("a >= 2",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tGEQ,        Some(">="), [2, 4],
                    :tINTEGER,    Some("2"),  [5, 6]);
}

#[test]
fn test_global_case_0() {
    assert_scanned!("$blah",
                    :tGVAR, Some("$blah"), [0, 5]);
}

#[test]
fn test_global_backref_case_0() {
    assert_scanned!("$`",
                    :tBACK_REF, Some("$`"), [0, 2]);
}

#[test]
fn test_global_dash_something_case_0() {
    assert_scanned!("$-x",
                    :tGVAR, Some("$-x"), [0, 3]);
}

#[test]
fn test_global_number_case_0() {
    assert_scanned!("$10",
                    :tNTH_REF, Some("10"), [0, 3]);
}

#[test]
fn test_global_other_case_0() {
    assert_scanned!("[$~, $*, $$, $?, $!, $@, $/, $\\, $;, $,, $., $=, $:, $<, $>, $\"]",
                    :tLBRACK, Some("["),   [0, 1],
                    :tGVAR,   Some("$~"),  [1, 3],
                    :tCOMMA,  Some(","),   [3, 4],
                    :tGVAR,   Some("$*"),  [5, 7],
                    :tCOMMA,  Some(","),   [7, 8],
                    :tGVAR,   Some("$$"),  [9, 11],
                    :tCOMMA,  Some(","),   [11, 12],
                    :tGVAR,   Some("$?"),  [13, 15],
                    :tCOMMA,  Some(","),   [15, 16],
                    :tGVAR,   Some("$!"),  [17, 19],
                    :tCOMMA,  Some(","),   [19, 20],
                    :tGVAR,   Some("$@"),  [21, 23],
                    :tCOMMA,  Some(","),   [23, 24],
                    :tGVAR,   Some("$/"),  [25, 27],
                    :tCOMMA,  Some(","),   [27, 28],
                    :tGVAR,   Some("$\\"), [29, 31],
                    :tCOMMA,  Some(","),   [31, 32],
                    :tGVAR,   Some("$;"),  [33, 35],
                    :tCOMMA,  Some(","),   [35, 36],
                    :tGVAR,   Some("$,"),  [37, 39],
                    :tCOMMA,  Some(","),   [39, 40],
                    :tGVAR,   Some("$."),  [41, 43],
                    :tCOMMA,  Some(","),   [43, 44],
                    :tGVAR,   Some("$="),  [45, 47],
                    :tCOMMA,  Some(","),   [47, 48],
                    :tGVAR,   Some("$:"),  [49, 51],
                    :tCOMMA,  Some(","),   [51, 52],
                    :tGVAR,   Some("$<"),  [53, 55],
                    :tCOMMA,  Some(","),   [55, 56],
                    :tGVAR,   Some("$>"),  [57, 59],
                    :tCOMMA,  Some(","),   [59, 60],
                    :tGVAR,   Some("$\""), [61, 63],
                    :tRBRACK, Some("]"),   [63, 64]);
}

#[test]
fn test_global_underscore_case_0() {
    assert_scanned!("$_",
                    :tGVAR, Some("$_"), [0, 2]);
}

#[test]
fn test_global_weird_case_0() {
    assert_scanned!("$__blah",
                    :tGVAR, Some("$__blah"), [0, 7]);
}

#[test]
fn test_global_zero_case_0() {
    assert_scanned!("$0",
                    :tGVAR, Some("$0"), [0, 2]);
}

#[test]
fn test_gt_case_0() {
    assert_scanned!("a > 2",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tGT,         Some(">"), [2, 3],
                    :tINTEGER,    Some("2"), [4, 5]);
}

#[test]
fn test_heredoc_backtick_case_0() {
    assert_scanned!("a = <<`EOF`\n  blah blah\nEOF\n",
                    :tIDENTIFIER,     Some("a"),             [0, 1],
                    :tEQL,            Some("="),             [2, 3],
                    :tXSTRING_BEG,    Some("<<`"),           [4, 11],
                    :tSTRING_CONTENT, Some("  blah blah\n"), [12, 24],
                    :tSTRING_END,     Some("EOF"),           [24, 27],
                    :tNL,             None,                  [11, 12]);
}

#[test]
fn test_heredoc_cr_case_0() {
    assert_scanned!("a = <<E\r\r\nABCDEF\r\r\nE\r\r\r\n",
                    :tIDENTIFIER,     Some("a"),          [0, 1],
                    :tEQL,            Some("="),          [2, 3],
                    :tSTRING_BEG,     Some("<<\""),       [4, 7],
                    :tSTRING_CONTENT, Some("ABCDEF\r\n"), [9, 17],
                    :tSTRING_END,     Some("E"),          [17, 20],
                    :tNL,             None,               [8, 9]);
}

#[test]
fn test_heredoc_double_case_0() {
    assert_scanned!("a = <<\"EOF\"\n  blah blah\nEOF\n",
                    :tIDENTIFIER,     Some("a"),             [0, 1],
                    :tEQL,            Some("="),             [2, 3],
                    :tSTRING_BEG,     Some("<<\""),          [4, 11],
                    :tSTRING_CONTENT, Some("  blah blah\n"), [12, 24],
                    :tSTRING_END,     Some("EOF"),           [24, 27],
                    :tNL,             None,                  [11, 12]);
}

#[test]
fn test_heredoc_double_dash_case_0() {
    assert_scanned!("a = <<-\"EOF\"\n  blah blah\n  EOF\n",
                    :tIDENTIFIER,     Some("a"),             [0, 1],
                    :tEQL,            Some("="),             [2, 3],
                    :tSTRING_BEG,     Some("<<\""),          [4, 12],
                    :tSTRING_CONTENT, Some("  blah blah\n"), [13, 25],
                    :tSTRING_END,     Some("EOF"),           [25, 30],
                    :tNL,             None,                  [12, 13]);
}

#[test]
fn test_heredoc_double_interp_case_0() {
    assert_scanned!("a = <<\"EOF\"\n#x a #@a b #$b c #{3} \nEOF\n",
                    :tIDENTIFIER,     Some("a"),     [0, 1],
                    :tEQL,            Some("="),     [2, 3],
                    :tSTRING_BEG,     Some("<<\""),  [4, 11],
                    :tSTRING_CONTENT, Some("#x a "), [12, 17],
                    :tSTRING_DVAR,    None,          [17, 18],
                    :tIVAR,           Some("@a"),    [18, 20],
                    :tSTRING_CONTENT, Some(" b "),   [20, 23],
                    :tSTRING_DVAR,    None,          [23, 24],
                    :tGVAR,           Some("$b"),    [24, 26],
                    :tSTRING_CONTENT, Some(" c "),   [26, 29],
                    :tSTRING_DBEG,    Some("#{"),    [29, 31],
                    :tINTEGER,        Some("3"),     [31, 32],
                    :tRCURLY,         Some("}"),     [32, 33],
                    :tSTRING_CONTENT, Some(" \n"),   [33, 35],
                    :tSTRING_END,     Some("EOF"),   [35, 38],
                    :tNL,             None,          [11, 12]);
}

#[test]
fn test_heredoc_empty_case_0() {
    assert_scanned!("<<\"\"\n#{x}\nblah2\n\n",
                    :tSTRING_BEG,     Some("<<\""),    [0, 4],
                    :tSTRING_DBEG,    Some("#{"),      [5, 7],
                    :tIDENTIFIER,     Some("x"),       [7, 8],
                    :tRCURLY,         Some("}"),       [8, 9],
                    :tSTRING_CONTENT, Some("\n"),      [9, 10],
                    :tSTRING_CONTENT, Some("blah2\n"), [10, 16],
                    :tSTRING_END,     Some(""),        [16, 16],
                    :tNL,             None,            [4, 5]);
}

#[test]
fn test_heredoc_none_case_0() {
    assert_scanned!("a = <<EOF\nblah\nblah\nEOF",
                    :tIDENTIFIER,     Some("a"),      [0, 1],
                    :tEQL,            Some("="),      [2, 3],
                    :tSTRING_BEG,     Some("<<\""),   [4, 9],
                    :tSTRING_CONTENT, Some("blah\n"), [10, 15],
                    :tSTRING_CONTENT, Some("blah\n"), [15, 20],
                    :tSTRING_END,     Some("EOF"),    [20, 23],
                    :tNL,             None,           [9, 10]);
}

#[test]
fn test_heredoc_none_dash_case_0() {
    assert_scanned!("a = <<-EOF\nblah\nblah\n  EOF",
                    :tIDENTIFIER,     Some("a"),      [0, 1],
                    :tEQL,            Some("="),      [2, 3],
                    :tSTRING_BEG,     Some("<<\""),   [4, 10],
                    :tSTRING_CONTENT, Some("blah\n"), [11, 16],
                    :tSTRING_CONTENT, Some("blah\n"), [16, 21],
                    :tSTRING_END,     Some("EOF"),    [21, 26],
                    :tNL,             None,           [10, 11]);
}

#[test]
fn test_heredoc_one_character_case_0() {
    assert_scanned!("a = <<E\nABCDEF\nE\n",
                    :tIDENTIFIER,     Some("a"),        [0, 1],
                    :tEQL,            Some("="),        [2, 3],
                    :tSTRING_BEG,     Some("<<\""),     [4, 7],
                    :tSTRING_CONTENT, Some("ABCDEF\n"), [8, 15],
                    :tSTRING_END,     Some("E"),        [15, 16],
                    :tNL,             None,             [7, 8]);
}

#[test]
fn test_heredoc_single_case_0() {
    assert_scanned!("a = <<'EOF'\n  blah blah\nEOF\n",
                    :tIDENTIFIER,     Some("a"),             [0, 1],
                    :tEQL,            Some("="),             [2, 3],
                    :tSTRING_BEG,     Some("<<'"),           [4, 11],
                    :tSTRING_CONTENT, Some("  blah blah\n"), [12, 24],
                    :tSTRING_END,     Some("EOF"),           [24, 27],
                    :tNL,             None,                  [11, 12]);
}

#[test]
fn test_heredoc_single_dash_case_0() {
    assert_scanned!("a = <<-'EOF'\n  blah blah\n  EOF\n",
                    :tIDENTIFIER,     Some("a"),             [0, 1],
                    :tEQL,            Some("="),             [2, 3],
                    :tSTRING_BEG,     Some("<<'"),           [4, 12],
                    :tSTRING_CONTENT, Some("  blah blah\n"), [13, 25],
                    :tSTRING_END,     Some("EOF"),           [25, 30],
                    :tNL,             None,                  [12, 13]);
}

#[test]
fn test_heredoc_with_identifier_ending_newline_24_case_0() {
    assert_scanned!("a = <<\"EOS\n\"\nABCDEF\nEOS\n",
                    :tIDENTIFIER,     Some("a"),        [0, 1],
                    :tEQL,            Some("="),        [2, 3],
                    :tSTRING_BEG,     Some("<<\""),     [4, 12],
                    :tSTRING_CONTENT, Some("ABCDEF\n"), [13, 20],
                    :tSTRING_END,     Some("EOS"),      [20, 23],
                    :tNL,             None,             [12, 13]);
}

#[test]
fn test_identifier_case_0() {
    assert_scanned!("identifier",
                    :tIDENTIFIER, Some("identifier"), [0, 10]);
}

#[test]
fn test_identifier_bang_case_0() {
    assert_scanned!("identifier!",
                    :tFID, Some("identifier!"), [0, 11]);
}

#[test]
fn test_identifier_bang_case_1() {
    assert_scanned!("identifier!=",
                    :tIDENTIFIER, Some("identifier"), [0, 10],
                    :tNEQ,        Some("!="),         [10, 12]);
}

#[test]
fn test_identifier_eh_case_0() {
    assert_scanned!("identifier?",
                    :tFID, Some("identifier?"), [0, 11]);
}

#[test]
fn test_identifier_eh_case_1() {
    assert_scanned!("identifier?=",
                    :tIDENTIFIER, Some("identifier"), [0, 10],
                    :tCHARACTER,  Some("="),          [10, 12]);
}

#[test]
fn test_identifier_equals3_case_0() {
    assert_scanned!(":a===b",
                    :tSYMBOL,     Some("a"),   [0, 2],
                    :tEQQ,        Some("==="), [2, 5],
                    :tIDENTIFIER, Some("b"),   [5, 6]);
}

#[test]
fn test_identifier_equals_arrow_case_0() {
    assert_scanned!(":blah==>",
                    :tSYMBOL, Some("blah="), [0, 6],
                    :tASSOC,  Some("=>"),    [6, 8]);
}

#[test]
fn test_identifier_equals_equals_arrow_case_0() {
    assert_scanned!(":a==>b",
                    :tSYMBOL,     Some("a="), [0, 3],
                    :tASSOC,      Some("=>"), [3, 5],
                    :tIDENTIFIER, Some("b"),  [5, 6]);
}

#[test]
fn test_identifier_equals_expr_case_0() {
    assert_scanned!("y = arg",
                    :tIDENTIFIER, Some("y"),   [0, 1],
                    :tEQL,        Some("="),   [2, 3],
                    :tIDENTIFIER, Some("arg"), [4, 7]);
}

#[test]
fn test_identifier_equals_tilde_case_0() {
    assert_scanned!("identifier=~",
                    :tIDENTIFIER, Some("identifier="), [0, 11],
                    :tTILDE,      Some("~"),           [11, 12]);
}

#[test]
fn test_if_stmt_case_0() {
    assert_scanned!("if true\n return end",
                    :kIF,     Some("if"),     [0, 2],
                    :kTRUE,   Some("true"),   [3, 7],
                    :tNL,     None,           [7, 8],
                    :kRETURN, Some("return"), [9, 15],
                    :kEND,    Some("end"),    [16, 19]);
}

#[test]
fn test_if_unless_mod_case_0() {
    assert_scanned!("return if true unless false",
                    :kRETURN,     Some("return"), [0, 6],
                    :kIF_MOD,     Some("if"),     [7, 9],
                    :kTRUE,       Some("true"),   [10, 14],
                    :kUNLESS_MOD, Some("unless"), [15, 21],
                    :kFALSE,      Some("false"),  [22, 27]);
}

#[test]
fn test_int_suffix_case_0() {
    assert_scanned!("42r",
                    :tINTEGER,    Some("42"), [0, 2],
                    :tIDENTIFIER, Some("r"),  [2, 3]);
}

#[test]
fn test_int_suffix_case_1() {
    assert_scanned!("42if",
                    :tINTEGER, Some("42"), [0, 2],
                    :kIF_MOD,  Some("if"), [2, 4]);
}

#[test]
fn test_int_suffix_case_2() {
    assert_scanned!("42r",
                    :tINTEGER,    Some("42"), [0, 2],
                    :tIDENTIFIER, Some("r"),  [2, 3]);
}

#[test]
fn test_int_suffix_case_3() {
    assert_scanned!("42if",
                    :tINTEGER, Some("42"), [0, 2],
                    :kIF_MOD,  Some("if"), [2, 4]);
}

#[test]
fn test_int_suffix_case_4() {
    assert_scanned!("42r",
                    :tINTEGER,    Some("42"), [0, 2],
                    :tIDENTIFIER, Some("r"),  [2, 3]);
}

#[test]
fn test_int_suffix_case_5() {
    assert_scanned!("42if",
                    :tINTEGER, Some("42"), [0, 2],
                    :kIF_MOD,  Some("if"), [2, 4]);
}

#[test]
fn test_int_suffix_case_6() {
    assert_scanned!("42r",
                    :tRATIONAL, Some("42/1"), [0, 3]);
}

#[test]
fn test_int_suffix_case_7() {
    assert_scanned!("42i",
                    :tIMAGINARY, Some("0+42i"), [0, 3]);
}

#[test]
fn test_int_suffix_case_8() {
    assert_scanned!("42ri",
                    :tIMAGINARY, Some("0+42/1i"), [0, 4]);
}

#[test]
fn test_integer_case_0() {
    assert_scanned!("42",
                    :tINTEGER, Some("42"), [0, 2]);
}

#[test]
fn test_integer_bin_case_0() {
    assert_scanned!("0b101010",
                    :tINTEGER, Some("42"), [0, 8]);
}

#[test]
fn test_integer_dec_case_0() {
    assert_scanned!("42",
                    :tINTEGER, Some("42"), [0, 2]);
}

#[test]
fn test_integer_dec_d_case_0() {
    assert_scanned!("0d42",
                    :tINTEGER, Some("42"), [0, 4]);
}

#[test]
fn test_integer_hex_case_0() {
    assert_scanned!("0x2a",
                    :tINTEGER, Some("42"), [0, 4]);
}

#[test]
fn test_integer_oct_case_0() {
    assert_scanned!("052",
                    :tINTEGER, Some("42"), [0, 3]);
}

#[test]
fn test_integer_oct_o_upper_case_0() {
    assert_scanned!("0O52",
                    :tINTEGER, Some("42"), [0, 4]);
}

#[test]
fn test_integer_oct_o_upper_not_bad_none_case_0() {
    assert_scanned!("0O ",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_integer_oct_o_case_0() {
    assert_scanned!("0o52",
                    :tINTEGER, Some("42"), [0, 4]);
}

#[test]
fn test_integer_oct_o_not_bad_none_case_0() {
    assert_scanned!("0o ",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_integer_trailing_case_0() {
    assert_scanned!("1.to_s",
                    :tINTEGER,    Some("1"),    [0, 1],
                    :tDOT,        Some("."),    [1, 2],
                    :tIDENTIFIER, Some("to_s"), [2, 6]);
}

#[test]
fn test_integer_underscore_case_0() {
    assert_scanned!("4_2",
                    :tINTEGER, Some("42"), [0, 3]);
}

#[test]
fn test_integer_zero_case_0() {
    assert_scanned!("0",
                    :tINTEGER, Some("0"), [0, 1]);
}

#[test]
fn test_ivar_case_0() {
    assert_scanned!("@blah",
                    :tIVAR, Some("@blah"), [0, 5]);
}

#[test]
fn test_keyword_expr_case_0() {
    assert_scanned!("if",
                    :kIF_MOD, Some("if"), [0, 2]);
}

#[test]
fn test_label_18_case_0() {
    assert_scanned!("{a:b",
                    :tLBRACE,     Some("{"), [0, 1],
                    :tIDENTIFIER, Some("a"), [1, 2],
                    :tSYMBOL,     Some("b"), [2, 4]);
}

#[test]
fn test_label_19_case_0() {
    assert_scanned!("{a:b",
                    :tLBRACE,     Some("{"), [0, 1],
                    :tLABEL,      Some("a"), [1, 3],
                    :tIDENTIFIER, Some("b"), [3, 4]);
}

#[test]
fn test_label_22_case_0() {
    assert_scanned!("{'a':",
                    :tLBRACE,         Some("{"), [0, 1],
                    :tSTRING_BEG,     Some("'"), [1, 2],
                    :tSTRING_CONTENT, Some("a"), [2, 3],
                    :tLABEL_END,      Some("'"), [3, 5]);
}

#[test]
fn test_label_colon2_22_case_0() {
    assert_scanned!("{'a'::",
                    :tLBRACE, Some("{"),  [0, 1],
                    :tSTRING, Some("a"),  [1, 4],
                    :tCOLON2, Some("::"), [4, 6]);
}

#[test]
fn test_label_fid_19_case_0() {
    assert_scanned!("{a?:true",
                    :tLBRACE, Some("{"),    [0, 1],
                    :tLABEL,  Some("a?"),   [1, 4],
                    :kTRUE,   Some("true"), [4, 8]);
}

#[test]
fn test_label_in_params_18_case_0() {
    assert_scanned!("foo(a:b",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tLPAREN2,    Some("("),   [3, 4],
                    :tIDENTIFIER, Some("a"),   [4, 5],
                    :tSYMBOL,     Some("b"),   [5, 7]);
}

#[test]
fn test_label_in_params_19_case_0() {
    assert_scanned!("foo(a:b",
                    :tIDENTIFIER, Some("foo"), [0, 3],
                    :tLPAREN2,    Some("("),   [3, 4],
                    :tLABEL,      Some("a"),   [4, 6],
                    :tIDENTIFIER, Some("b"),   [6, 7]);
}

#[test]
fn test_label_nested_22_case_0() {
    assert_scanned!("{'a\":':",
                    :tLBRACE,         Some("{"),    [0, 1],
                    :tSTRING_BEG,     Some("'"),    [1, 2],
                    :tSTRING_CONTENT, Some("a\":"), [2, 5],
                    :tLABEL_END,      Some("'"),    [5, 7]);
}

#[test]
fn test_lt_case_0() {
    assert_scanned!("<",
                    :tLT, Some("<"), [0, 1]);
}

#[test]
fn test_lt2_case_0() {
    assert_scanned!("a << b",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tLSHFT,      Some("<<"), [2, 4],
                    :tIDENTIFIER, Some("b"),  [5, 6]);
}

#[test]
fn test_lt2_equals_case_0() {
    assert_scanned!("a <<= b",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tOP_ASGN,    Some("<<"), [2, 5],
                    :tIDENTIFIER, Some("b"),  [6, 7]);
}

#[test]
fn test_lt_equals_case_0() {
    assert_scanned!("<=",
                    :tLEQ, Some("<="), [0, 2]);
}

#[test]
fn test_minus_case_0() {
    assert_scanned!("1 - 2",
                    :tINTEGER, Some("1"), [0, 1],
                    :tMINUS,   Some("-"), [2, 3],
                    :tINTEGER, Some("2"), [4, 5]);
}

#[test]
fn test_minus_equals_case_0() {
    assert_scanned!("-=",
                    :tOP_ASGN, Some("-"), [0, 2]);
}

#[test]
fn test_minus_method_case_0() {
    assert_scanned!("-",
                    :tMINUS, Some("-"), [0, 1]);
}

#[test]
fn test_minus_unary_method_case_0() {
    assert_scanned!("-@",
                    :tUMINUS, Some("-@"), [0, 2]);
}

#[test]
fn test_minus_unary_number_case_0() {
    assert_scanned!("-42",
                    :tUNARY_NUM, Some("-"),  [0, 1],
                    :tINTEGER,   Some("42"), [1, 3]);
}

#[test]
fn test_minus_unary_whitespace_number_case_0() {
    assert_scanned!("- 42",
                    :tUNARY_NUM, Some("-"),  [0, 1],
                    :tINTEGER,   Some("42"), [2, 4]);
}

#[test]
fn test_mod_not_command_start_19_case_0() {
    assert_scanned!("if a:b",
                    :kIF_MOD,     Some("if"), [0, 2],
                    :tLABEL,      Some("a"),  [3, 5],
                    :tIDENTIFIER, Some("b"),  [5, 6]);
}

#[test]
fn test_mod_not_command_start_19_case_1() {
    assert_scanned!("unless a:b",
                    :kUNLESS_MOD, Some("unless"), [0, 6],
                    :tLABEL,      Some("a"),      [7, 9],
                    :tIDENTIFIER, Some("b"),      [9, 10]);
}

#[test]
fn test_mod_not_command_start_19_case_2() {
    assert_scanned!("while a:b",
                    :kWHILE_MOD,  Some("while"), [0, 5],
                    :tLABEL,      Some("a"),     [6, 8],
                    :tIDENTIFIER, Some("b"),     [8, 9]);
}

#[test]
fn test_mod_not_command_start_19_case_3() {
    assert_scanned!("until a:b",
                    :kUNTIL_MOD,  Some("until"), [0, 5],
                    :tLABEL,      Some("a"),     [6, 8],
                    :tIDENTIFIER, Some("b"),     [8, 9]);
}

#[test]
fn test_mod_not_command_start_19_case_4() {
    assert_scanned!("rescue a:b",
                    :kRESCUE_MOD, Some("rescue"), [0, 6],
                    :tLABEL,      Some("a"),      [7, 9],
                    :tIDENTIFIER, Some("b"),      [9, 10]);
}

#[test]
fn test_nth_ref_case_0() {
    assert_scanned!("[$1, $2, $3]",
                    :tLBRACK,  Some("["), [0, 1],
                    :tNTH_REF, Some("1"), [1, 3],
                    :tCOMMA,   Some(","), [3, 4],
                    :tNTH_REF, Some("2"), [5, 7],
                    :tCOMMA,   Some(","), [7, 8],
                    :tNTH_REF, Some("3"), [9, 11],
                    :tRBRACK,  Some("]"), [11, 12]);
}

#[test]
fn test_numbers_case_0() {
    assert_scanned!("0b10",
                    :tINTEGER, Some("2"), [0, 4]);
}

#[test]
fn test_numbers_case_1() {
    assert_scanned!("0B10",
                    :tINTEGER, Some("2"), [0, 4]);
}

#[test]
fn test_numbers_case_2() {
    assert_scanned!("0d10",
                    :tINTEGER, Some("10"), [0, 4]);
}

#[test]
fn test_numbers_case_3() {
    assert_scanned!("0D10",
                    :tINTEGER, Some("10"), [0, 4]);
}

#[test]
fn test_numbers_case_4() {
    assert_scanned!("0x10",
                    :tINTEGER, Some("16"), [0, 4]);
}

#[test]
fn test_numbers_case_5() {
    assert_scanned!("0X10",
                    :tINTEGER, Some("16"), [0, 4]);
}

#[test]
fn test_numbers_case_6() {
    assert_scanned!("0o10",
                    :tINTEGER, Some("8"), [0, 4]);
}

#[test]
fn test_numbers_case_7() {
    assert_scanned!("0O10",
                    :tINTEGER, Some("8"), [0, 4]);
}

#[test]
fn test_numbers_case_8() {
    assert_scanned!("0o",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_numbers_case_9() {
    assert_scanned!("0O",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_numbers_case_10() {
    assert_scanned!("0o",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_numbers_case_11() {
    assert_scanned!("0O",
                    :tINTEGER, Some("0"), [0, 2]);
}

#[test]
fn test_numbers_case_12() {
    assert_scanned!("0777_333",
                    :tINTEGER, Some("261851"), [0, 8]);
}

#[test]
fn test_numbers_case_13() {
    assert_scanned!("0",
                    :tINTEGER, Some("0"), [0, 1]);
}

#[test]
fn test_open_bracket_case_0() {
    assert_scanned!("(",
                    :tLPAREN, Some("("), [0, 1]);
}

#[test]
fn test_open_bracket_cmdarg_case_0() {
    assert_scanned!("m (",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tLPAREN_ARG, Some("("), [2, 3]);
}

#[test]
fn test_open_bracket_exprarg_case_0() {
    assert_scanned!("m(",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tLPAREN2,    Some("("), [1, 2]);
}

#[test]
fn test_open_curly_bracket_case_0() {
    assert_scanned!("{",
                    :tLBRACE, Some("{"), [0, 1]);
}

#[test]
fn test_open_curly_bracket_arg_case_0() {
    assert_scanned!("m { 3 }",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tLCURLY,     Some("{"), [2, 3],
                    :tINTEGER,    Some("3"), [4, 5],
                    :tRCURLY,     Some("}"), [6, 7]);
}

#[test]
fn test_open_curly_bracket_block_case_0() {
    assert_scanned!("{ 4 }",
                    :tLBRACE_ARG, Some("{"), [0, 1],
                    :tINTEGER,    Some("4"), [2, 3],
                    :tRCURLY,     Some("}"), [4, 5]);
}

#[test]
fn test_open_square_bracket_arg_case_0() {
    assert_scanned!("m [ 3 ]",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tLBRACK,     Some("["), [2, 3],
                    :tINTEGER,    Some("3"), [4, 5],
                    :tRBRACK,     Some("]"), [6, 7]);
}

#[test]
fn test_open_square_bracket_ary_case_0() {
    assert_scanned!("[1, 2, 3]",
                    :tLBRACK,  Some("["), [0, 1],
                    :tINTEGER, Some("1"), [1, 2],
                    :tCOMMA,   Some(","), [2, 3],
                    :tINTEGER, Some("2"), [4, 5],
                    :tCOMMA,   Some(","), [5, 6],
                    :tINTEGER, Some("3"), [7, 8],
                    :tRBRACK,  Some("]"), [8, 9]);
}

#[test]
fn test_open_square_bracket_meth_case_0() {
    assert_scanned!("m[3]",
                    :tIDENTIFIER, Some("m"), [0, 1],
                    :tLBRACK2,    Some("["), [1, 2],
                    :tINTEGER,    Some("3"), [2, 3],
                    :tRBRACK,     Some("]"), [3, 4]);
}

#[test]
fn test_or_case_0() {
    assert_scanned!("|",
                    :tPIPE, Some("|"), [0, 1]);
}

#[test]
fn test_or2_case_0() {
    assert_scanned!("||",
                    :tOROP, Some("||"), [0, 2]);
}

#[test]
fn test_or2_after_27_case_0() {
    assert_scanned!("||",
                    :tPIPE, Some("|"), [0, 1],
                    :tPIPE, Some("|"), [1, 2]);
}

#[test]
fn test_or2_equals_case_0() {
    assert_scanned!("||=",
                    :tOP_ASGN, Some("||"), [0, 3]);
}

#[test]
fn test_or_equals_case_0() {
    assert_scanned!("|=",
                    :tOP_ASGN, Some("|"), [0, 2]);
}

#[test]
fn test_parser_bug_486_case_0() {
    assert_scanned!(":!@",
                    :tSYMBOL, Some("!"), [0, 3]);
}

#[test]
fn test_parser_bug_486_case_1() {
    assert_scanned!(":~@",
                    :tSYMBOL, Some("~"), [0, 3]);
}

#[test]
fn test_pct_string_colon_22_case_0() {
    assert_scanned!("{%'a':",
                    :tLBRACE,         Some("{"),  [0, 1],
                    :tSTRING_BEG,     Some("%'"), [1, 3],
                    :tSTRING_CONTENT, Some("a"),  [3, 4],
                    :tSTRING_END,     Some("'"),  [4, 5],
                    :tCOLON,          Some(":"),  [5, 6]);
}

#[test]
fn test_percent_case_0() {
    assert_scanned!("a % 2",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tPERCENT,    Some("%"), [2, 3],
                    :tINTEGER,    Some("2"), [4, 5]);
}

#[test]
fn test_percent_equals_case_0() {
    assert_scanned!("a %= 2",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tOP_ASGN,    Some("%"), [2, 4],
                    :tINTEGER,    Some("2"), [5, 6]);
}

#[test]
fn test_plus_case_0() {
    assert_scanned!("1 + 1",
                    :tINTEGER, Some("1"), [0, 1],
                    :tPLUS,    Some("+"), [2, 3],
                    :tINTEGER, Some("1"), [4, 5]);
}

#[test]
fn test_plus_equals_case_0() {
    assert_scanned!("+=",
                    :tOP_ASGN, Some("+"), [0, 2]);
}

#[test]
fn test_plus_method_case_0() {
    assert_scanned!("+",
                    :tPLUS, Some("+"), [0, 1]);
}

#[test]
fn test_plus_unary_method_case_0() {
    assert_scanned!("+@",
                    :tUPLUS, Some("+@"), [0, 2]);
}

#[test]
fn test_plus_unary_number_case_0() {
    assert_scanned!("+42",
                    :tUNARY_NUM, Some("+"),  [0, 1],
                    :tINTEGER,   Some("42"), [1, 3]);
}

#[test]
fn test_plus_unary_whitespace_number_case_0() {
    assert_scanned!("+ 42",
                    :tUNARY_NUM, Some("+"),  [0, 1],
                    :tINTEGER,   Some("42"), [2, 4]);
}

#[test]
fn test_question_18_case_0() {
    assert_scanned!("?*",
                    :tINTEGER, Some("42"), [0, 2]);
}

#[test]
fn test_question_19_case_0() {
    assert_scanned!("?*",
                    :tCHARACTER, Some("*"), [0, 2]);
}

#[test]
fn test_question_bad_ws_case_0() {
    assert_scanned!("? ",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_bad_ws_case_1() {
    assert_scanned!("?\n",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_bad_ws_case_2() {
    assert_scanned!("?\t",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_bad_ws_case_3() {
    assert_scanned!("?\x0b",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_bad_ws_case_4() {
    assert_scanned!("?\r",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_bad_ws_case_5() {
    assert_scanned!("?\x0c",
                    :tEH, Some("?"), [0, 1]);
}

#[test]
fn test_question_eh_a_18_case_0() {
    assert_scanned!("?a",
                    :tINTEGER, Some("97"), [0, 2]);
}

#[test]
fn test_question_eh_a_19_case_0() {
    assert_scanned!("?a",
                    :tCHARACTER, Some("a"), [0, 2]);
}

#[test]
fn test_question_eh_escape_m_upper_escape_c_upper_18_case_0() {
    assert_scanned!("?\\M-\\C-a",
                    :tINTEGER, Some("129"), [0, 8]);
}


#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_0() {
    assert_scanned!("\"\\u{ 1}\"",
                    :tSTRING, Some("\u{0001}"), [0, 8]);
}

#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_1() {
    assert_scanned!("\"\\u{1 }\"",
                    :tSTRING, Some("\u{0001}"), [0, 8]);
}

#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_2() {
    assert_scanned!("\"\\u{ 1 }\"",
                    :tSTRING, Some("\u{0001}"), [0, 9]);
}

#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_3() {
    assert_scanned!("\"\\u{1 2 }\"",
                    :tSTRING, Some("\u{0001}\u{0002}"), [0, 10]);
}

#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_4() {
    assert_scanned!("\"\\u{ 1 2}\"",
                    :tSTRING, Some("\u{0001}\u{0002}"), [0, 10]);
}

#[test]
fn test_question_eh_escape_space_around_unicode_point_24_case_5() {
    assert_scanned!("\"\\u{1  2}\"",
                    :tSTRING, Some("\u{0001}\u{0002}"), [0, 10]);
}

#[test]
fn test_question_eh_escape_u_4_digits_case_0() {
    assert_scanned!("?\\u{0001}",
                    :tCHARACTER, Some("\u{0001}"), [0, 7]);
}

#[test]
fn test_question_eh_single_unicode_point_case_0() {
    assert_scanned!("?\\u{123}",
                    :tCHARACTER, Some("ģ"), [0, 8]);
}

#[test]
fn test_question_eh_single_unicode_point_case_1() {
    assert_scanned!("?\\u{a}",
                    :tCHARACTER, Some("\n"), [0, 6]);
}

#[test]
fn test_question_ws_backslashed_18_case_0() {
    assert_scanned!("?\\ ",
                    :tINTEGER, Some("32"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_18_case_1() {
    assert_scanned!("?\\n",
                    :tINTEGER, Some("10"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_18_case_2() {
    assert_scanned!("?\\t",
                    :tINTEGER, Some("9"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_18_case_3() {
    assert_scanned!("?\\x0b",
                    :tINTEGER, Some("11"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_18_case_4() {
    assert_scanned!("?\\r",
                    :tINTEGER, Some("13"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_18_case_5() {
    assert_scanned!("?\\x0c",
                    :tINTEGER, Some("12"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_0() {
    assert_scanned!("?\\ ",
                    :tCHARACTER, Some(" "), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_1() {
    assert_scanned!("?\\n",
                    :tCHARACTER, Some("\n"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_2() {
    assert_scanned!("?\\t",
                    :tCHARACTER, Some("\t"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_3() {
    assert_scanned!("?\\x0b",
                    :tCHARACTER, Some("\x0b"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_4() {
    assert_scanned!("?\\r",
                    :tCHARACTER, Some("\r"), [0, 3]);
}

#[test]
fn test_question_ws_backslashed_19_case_5() {
    assert_scanned!("?\\x0c",
                    :tCHARACTER, Some("\x0c"), [0, 3]);
}

#[test]
fn test_rbracket_case_0() {
    assert_scanned!("]",
                    :tRBRACK, Some("]"), [0, 1]);
}

#[test]
fn test_rcurly_case_0() {
    assert_scanned!("}",
                    :tRCURLY, Some("}"), [0, 1]);
}

#[test]
fn test_regexp_case_0() {
    assert_scanned!("/regexp/",
                    :tREGEXP_BEG,     Some("/"),      [0, 1],
                    :tSTRING_CONTENT, Some("regexp"), [1, 7],
                    :tSTRING_END,     Some("/"),      [7, 8],
                    :tREGEXP_OPT,     Some(""),       [8, 8]);
}

#[test]
fn test_regexp_ambiguous_case_0() {
    assert_scanned!("method /regexp/",
                    :tIDENTIFIER,     Some("method"), [0, 6],
                    :tREGEXP_BEG,     Some("/"),      [7, 8],
                    :tSTRING_CONTENT, Some("regexp"), [8, 14],
                    :tSTRING_END,     Some("/"),      [14, 15],
                    :tREGEXP_OPT,     Some(""),       [15, 15]);
}

#[test]
fn test_regexp_escape_c_upper_case_0() {
    assert_scanned!("/regex\\C-x/",
                    :tREGEXP_BEG,     Some("/"),          [0, 1],
                    :tSTRING_CONTENT, Some("regex\\C-x"), [1, 10],
                    :tSTRING_END,     Some("/"),          [10, 11],
                    :tREGEXP_OPT,     Some(""),           [11, 11]);
}

#[test]
fn test_regexp_escape_c_upper_m_upper_case_0() {
    assert_scanned!("/regex\\C-\\M-x/",
                    :tREGEXP_BEG,     Some("/"),              [0, 1],
                    :tSTRING_CONTENT, Some("regex\\C-\\M-x"), [1, 13],
                    :tSTRING_END,     Some("/"),              [13, 14],
                    :tREGEXP_OPT,     Some(""),               [14, 14]);
}

#[test]
fn test_regexp_escape_c_upper_m_upper_craaaazy_case_0() {
    assert_scanned!("/regex\\C-\\\n\\M-x/",
                    :tREGEXP_BEG,     Some("/"),              [0, 1],
                    :tSTRING_CONTENT, Some("regex\\C-\\M-x"), [1, 15],
                    :tSTRING_END,     Some("/"),              [15, 16],
                    :tREGEXP_OPT,     Some(""),               [16, 16]);
}

#[test]
fn test_regexp_escape_m_upper_case_0() {
    assert_scanned!("/regex\\M-x/",
                    :tREGEXP_BEG,     Some("/"),          [0, 1],
                    :tSTRING_CONTENT, Some("regex\\M-x"), [1, 10],
                    :tSTRING_END,     Some("/"),          [10, 11],
                    :tREGEXP_OPT,     Some(""),           [11, 11]);
}

#[test]
fn test_regexp_escape_m_upper_c_upper_case_0() {
    assert_scanned!("/regex\\M-\\C-x/",
                    :tREGEXP_BEG,     Some("/"),              [0, 1],
                    :tSTRING_CONTENT, Some("regex\\M-\\C-x"), [1, 13],
                    :tSTRING_END,     Some("/"),              [13, 14],
                    :tREGEXP_OPT,     Some(""),               [14, 14]);
}

#[test]
fn test_regexp_escape_backslash_slash_case_0() {
    assert_scanned!("/\\//",
                    :tREGEXP_BEG,     Some("/"), [0, 1],
                    :tSTRING_CONTENT, Some("/"), [1, 3],
                    :tSTRING_END,     Some("/"), [3, 4],
                    :tREGEXP_OPT,     Some(""),  [4, 4]);
}

#[test]
fn test_regexp_escape_backslash_terminator_case_0() {
    assert_scanned!("%r%blah\\%blah%",
                    :tREGEXP_BEG,     Some("%r%"),       [0, 3],
                    :tSTRING_CONTENT, Some("blah%blah"), [3, 13],
                    :tSTRING_END,     Some("%"),         [13, 14],
                    :tREGEXP_OPT,     Some(""),          [14, 14]);
}

#[test]
fn test_regexp_escape_backslash_terminator_meta1_case_0() {
    assert_scanned!("%r{blah\\}blah}",
                    :tREGEXP_BEG,     Some("%r{"),         [0, 3],
                    :tSTRING_CONTENT, Some("blah\\}blah"), [3, 13],
                    :tSTRING_END,     Some("}"),           [13, 14],
                    :tREGEXP_OPT,     Some(""),            [14, 14]);
}

#[test]
fn test_regexp_escape_backslash_terminator_meta2_case_0() {
    assert_scanned!("%r/blah\\/blah/",
                    :tREGEXP_BEG,     Some("%r/"),       [0, 3],
                    :tSTRING_CONTENT, Some("blah/blah"), [3, 13],
                    :tSTRING_END,     Some("/"),         [13, 14],
                    :tREGEXP_OPT,     Some(""),          [14, 14]);
}

#[test]
fn test_regexp_escape_backslash_terminator_meta3_case_0() {
    assert_scanned!("%r/blah\\%blah/",
                    :tREGEXP_BEG,     Some("%r/"),         [0, 3],
                    :tSTRING_CONTENT, Some("blah\\%blah"), [3, 13],
                    :tSTRING_END,     Some("/"),           [13, 14],
                    :tREGEXP_OPT,     Some(""),            [14, 14]);
}

#[test]
fn test_regexp_escape_bs_case_0() {
    assert_scanned!("/regex\\\\regex/",
                    :tREGEXP_BEG,     Some("/"),              [0, 1],
                    :tSTRING_CONTENT, Some("regex\\\\regex"), [1, 13],
                    :tSTRING_END,     Some("/"),              [13, 14],
                    :tREGEXP_OPT,     Some(""),               [14, 14]);
}

#[test]
fn test_regexp_escape_c_case_0() {
    assert_scanned!("/regex\\cxxx/",
                    :tREGEXP_BEG,     Some("/"),           [0, 1],
                    :tSTRING_CONTENT, Some("regex\\cxxx"), [1, 11],
                    :tSTRING_END,     Some("/"),           [11, 12],
                    :tREGEXP_OPT,     Some(""),            [12, 12]);
}

#[test]
fn test_regexp_escape_c_backslash_case_0() {
    assert_scanned!("/regex\\c\\n/",
                    :tREGEXP_BEG,     Some("/"),           [0, 1],
                    :tSTRING_CONTENT, Some("regex\\c\\n"), [1, 10],
                    :tSTRING_END,     Some("/"),           [10, 11],
                    :tREGEXP_OPT,     Some(""),            [11, 11]);
}

#[test]
fn test_regexp_escape_chars_case_0() {
    assert_scanned!("/re\\tge\\nxp/",
                    :tREGEXP_BEG,     Some("/"),            [0, 1],
                    :tSTRING_CONTENT, Some("re\\tge\\nxp"), [1, 11],
                    :tSTRING_END,     Some("/"),            [11, 12],
                    :tREGEXP_OPT,     Some(""),             [12, 12]);
}

#[test]
fn test_regexp_escape_delimiter_meta_case_0() {
    assert_scanned!("%r(\\))",
                    :tREGEXP_BEG,     Some("%r("), [0, 3],
                    :tSTRING_CONTENT, Some("\\)"), [3, 5],
                    :tSTRING_END,     Some(")"),   [5, 6],
                    :tREGEXP_OPT,     Some(""),    [6, 6]);
}

#[test]
fn test_regexp_escape_delimiter_nonmeta_case_0() {
    assert_scanned!("%r'\\''",
                    :tREGEXP_BEG,     Some("%r'"), [0, 3],
                    :tSTRING_CONTENT, Some("'"),   [3, 5],
                    :tSTRING_END,     Some("'"),   [5, 6],
                    :tREGEXP_OPT,     Some(""),    [6, 6]);
}

#[test]
fn test_regexp_escape_double_backslash_case_0() {
    assert_scanned!("/[\\/\\\\]$/",
                    :tREGEXP_BEG,     Some("/"),        [0, 1],
                    :tSTRING_CONTENT, Some("[/\\\\]$"), [1, 8],
                    :tSTRING_END,     Some("/"),        [8, 9],
                    :tREGEXP_OPT,     Some(""),         [9, 9]);
}

#[test]
fn test_regexp_escape_hex_case_0() {
    assert_scanned!("/regex\\x61xp/",
                    :tREGEXP_BEG,     Some("/"),            [0, 1],
                    :tSTRING_CONTENT, Some("regex\\x61xp"), [1, 12],
                    :tSTRING_END,     Some("/"),            [12, 13],
                    :tREGEXP_OPT,     Some(""),             [13, 13]);
}

#[test]
fn test_regexp_escape_hex_one_case_0() {
    assert_scanned!("/^[\\xd\\xa]{2}/on",
                    :tREGEXP_BEG,     Some("/"),              [0, 1],
                    :tSTRING_CONTENT, Some("^[\\xd\\xa]{2}"), [1, 13],
                    :tSTRING_END,     Some("/"),              [13, 14],
                    :tREGEXP_OPT,     Some("on"),             [14, 16]);
}

#[test]
fn test_regexp_escape_oct1_case_0() {
    assert_scanned!("/regex\\0xp/",
                    :tREGEXP_BEG,     Some("/"),          [0, 1],
                    :tSTRING_CONTENT, Some("regex\\0xp"), [1, 10],
                    :tSTRING_END,     Some("/"),          [10, 11],
                    :tREGEXP_OPT,     Some(""),           [11, 11]);
}

#[test]
fn test_regexp_escape_oct2_case_0() {
    assert_scanned!("/regex\\07xp/",
                    :tREGEXP_BEG,     Some("/"),           [0, 1],
                    :tSTRING_CONTENT, Some("regex\\07xp"), [1, 11],
                    :tSTRING_END,     Some("/"),           [11, 12],
                    :tREGEXP_OPT,     Some(""),            [12, 12]);
}

#[test]
fn test_regexp_escape_oct3_case_0() {
    assert_scanned!("/regex\\10142/",
                    :tREGEXP_BEG,     Some("/"),            [0, 1],
                    :tSTRING_CONTENT, Some("regex\\10142"), [1, 12],
                    :tSTRING_END,     Some("/"),            [12, 13],
                    :tREGEXP_OPT,     Some(""),             [13, 13]);
}

#[test]
fn test_regexp_escape_other_meta_case_0() {
    assert_scanned!("/\\.\\$\\*\\+\\.\\?\\|/",
                    :tREGEXP_BEG,     Some("/"),                     [0, 1],
                    :tSTRING_CONTENT, Some("\\.\\$\\*\\+\\.\\?\\|"), [1, 15],
                    :tSTRING_END,     Some("/"),                     [15, 16],
                    :tREGEXP_OPT,     Some(""),                      [16, 16]);
}

#[test]
fn test_regexp_escape_return_case_0() {
    assert_scanned!("/regex\\\nregex/",
                    :tREGEXP_BEG,     Some("/"),          [0, 1],
                    :tSTRING_CONTENT, Some("regexregex"), [1, 13],
                    :tSTRING_END,     Some("/"),          [13, 14],
                    :tREGEXP_OPT,     Some(""),           [14, 14]);
}

#[test]
fn test_regexp_nm_case_0() {
    assert_scanned!("/.*/nm",
                    :tREGEXP_BEG,     Some("/"),  [0, 1],
                    :tSTRING_CONTENT, Some(".*"), [1, 3],
                    :tSTRING_END,     Some("/"),  [3, 4],
                    :tREGEXP_OPT,     Some("nm"), [4, 6]);
}

#[test]
fn test_rparen_case_0() {
    assert_scanned!(")",
                    :tRPAREN, Some(")"), [0, 1]);
}

#[test]
fn test_rshft_case_0() {
    assert_scanned!("a >> 2",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tRSHFT,      Some(">>"), [2, 4],
                    :tINTEGER,    Some("2"),  [5, 6]);
}

#[test]
fn test_rshft_equals_case_0() {
    assert_scanned!("a >>= 2",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tOP_ASGN,    Some(">>"), [2, 5],
                    :tINTEGER,    Some("2"),  [6, 7]);
}

#[test]
fn test_sclass_label_case_0() {
    assert_scanned!("class << a:b",
                    :kCLASS,      Some("class"), [0, 5],
                    :tLSHFT,      Some("<<"),    [6, 8],
                    :tIDENTIFIER, Some("a"),     [9, 10],
                    :tSYMBOL,     Some("b"),     [10, 12]);
}

#[test]
fn test_star_case_0() {
    assert_scanned!("a * ",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tSTAR2,      Some("*"), [2, 3]);
}

#[test]
fn test_star2_case_0() {
    assert_scanned!("a ** ",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tPOW,        Some("**"), [2, 4]);
}

#[test]
fn test_star2_beg_case_0() {
    assert_scanned!("** ",
                    :tDSTAR, Some("**"), [0, 2]);
}

#[test]
fn test_star2_equals_case_0() {
    assert_scanned!("a **= ",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tOP_ASGN,    Some("**"), [2, 5]);
}

#[test]
fn test_star_arg_case_0() {
    assert_scanned!(" *a",
                    :tSTAR,       Some("*"), [1, 2],
                    :tIDENTIFIER, Some("a"), [2, 3]);
}

#[test]
fn test_star_arg_beg_case_0() {
    assert_scanned!("*a",
                    :tSTAR,       Some("*"), [0, 1],
                    :tIDENTIFIER, Some("a"), [1, 2]);
}

#[test]
fn test_star_arg_beg_fname_case_0() {
    assert_scanned!("*a",
                    :tSTAR2,      Some("*"), [0, 1],
                    :tIDENTIFIER, Some("a"), [1, 2]);
}

#[test]
fn test_star_equals_case_0() {
    assert_scanned!("a *= ",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tOP_ASGN,    Some("*"), [2, 4]);
}

#[test]
fn test_static_env_case_0() {
    assert_scanned!("a [42]",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tLBRACK2,    Some("["),  [2, 3],
                    :tINTEGER,    Some("42"), [3, 5],
                    :tRBRACK,     Some("]"),  [5, 6]);
}

#[test]
fn test_string_double_case_0() {
    assert_scanned!("\"string\"",
                    :tSTRING, Some("string"), [0, 8]);
}

#[test]
fn test_string_double_escape_c_upper_case_0() {
    assert_scanned!("\"\\C-a\"",
                    :tSTRING, Some("\u{0001}"), [0, 6]);
}

#[test]
fn test_string_double_escape_c_upper_backslash_case_0() {
    assert_scanned!("\"\\C-\\\\\"",
                    :tSTRING, Some("\u{001C}"), [0, 7]);
}


#[test]
fn test_string_double_escape_c_upper_question_case_0() {
    assert_scanned!("\"\\C-?\"",
                    :tSTRING, Some("\u{007F}"), [0, 6]);
}




#[test]
fn test_string_double_escape_bs1_case_0() {
    assert_scanned!("\"a\\x07\\x07\"",
                    :tSTRING, Some("a\x07\x07"), [0, 7]);
}

#[test]
fn test_string_double_escape_bs2_case_0() {
    assert_scanned!("\"a\\\\x07\"",
                    :tSTRING, Some("a\\x07"), [0, 6]);
}

#[test]
fn test_string_double_escape_c_case_0() {
    assert_scanned!("\"\\ca\"",
                    :tSTRING, Some("\u{0001}"), [0, 5]);
}


#[test]
fn test_string_double_escape_c_question_case_0() {
    assert_scanned!("\"\\c?\"",
                    :tSTRING, Some("\u{007F}"), [0, 5]);
}

#[test]
fn test_string_double_escape_chars_case_0() {
    assert_scanned!("\"s\\tri\\ng\"",
                    :tSTRING, Some("s\tri\ng"), [0, 10]);
}

#[test]
fn test_string_double_escape_hex_case_0() {
    assert_scanned!("\"n = \\x61\\x62\\x63\"",
                    :tSTRING, Some("n = abc"), [0, 18]);
}

#[test]
fn test_string_double_escape_octal_case_0() {
    assert_scanned!("\"n = \\101\\102\\103\"",
                    :tSTRING, Some("n = ABC"), [0, 18]);
}


#[test]
fn test_string_double_interp_case_0() {
    assert_scanned!("\"blah #x a #@a b #$b c #{3} # \"",
                    :tSTRING_BEG,     Some("\""),         [0, 1],
                    :tSTRING_CONTENT, Some("blah #x a "), [1, 11],
                    :tSTRING_DVAR,    None,               [11, 12],
                    :tIVAR,           Some("@a"),         [12, 14],
                    :tSTRING_CONTENT, Some(" b "),        [14, 17],
                    :tSTRING_DVAR,    None,               [17, 18],
                    :tGVAR,           Some("$b"),         [18, 20],
                    :tSTRING_CONTENT, Some(" c "),        [20, 23],
                    :tSTRING_DBEG,    Some("#{"),         [23, 25],
                    :tINTEGER,        Some("3"),          [25, 26],
                    :tRCURLY,         Some("}"),          [26, 27],
                    :tSTRING_CONTENT, Some(" # "),        [27, 30],
                    :tSTRING_END,     Some("\""),         [30, 31]);
}

#[test]
fn test_string_double_interp_label_case_0() {
    assert_scanned!("\"#{foo:bar}\"",
                    :tSTRING_BEG,  Some("\""),  [0, 1],
                    :tSTRING_DBEG, Some("#{"),  [1, 3],
                    :tIDENTIFIER,  Some("foo"), [3, 6],
                    :tSYMBOL,      Some("bar"), [6, 10],
                    :tRCURLY,      Some("}"),   [10, 11],
                    :tSTRING_END,  Some("\""),  [11, 12]);
}

#[test]
fn test_string_double_nested_curlies_case_0() {
    assert_scanned!("%{nest{one{two}one}nest}",
                    :tSTRING_BEG,     Some("%{"),                    [0, 2],
                    :tSTRING_CONTENT, Some("nest{one{two}one}nest"), [2, 23],
                    :tSTRING_END,     Some("}"),                     [23, 24]);
}

#[test]
fn test_string_double_no_interp_case_0() {
    assert_scanned!("\"# blah\"",
                    :tSTRING, Some("# blah"), [0, 8]);
}

#[test]
fn test_string_double_no_interp_case_1() {
    assert_scanned!("\"blah # blah\"",
                    :tSTRING, Some("blah # blah"), [0, 13]);
}

#[test]
fn test_string_escape_x_single_case_0() {
    assert_scanned!("\"\\x0\"",
                    :tSTRING, Some("\u{0000}"), [0, 5]);
}

#[test]
fn test_string_pct_i_upper_case_0() {
    assert_scanned!("%I(s1 s2)",
                    :tSYMBOLS_BEG,    Some("%I("), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),  [3, 5],
                    :tSPACE,          None,        [5, 6],
                    :tSTRING_CONTENT, Some("s2"),  [6, 8],
                    :tSPACE,          None,        [8, 8],
                    :tSTRING_END,     Some(")"),   [8, 9]);
}

#[test]
fn test_string_pct_q_upper_case_0() {
    assert_scanned!("%Q[s1 s2]",
                    :tSTRING_BEG,     Some("%Q["),   [0, 3],
                    :tSTRING_CONTENT, Some("s1 s2"), [3, 8],
                    :tSTRING_END,     Some("]"),     [8, 9]);
}

#[test]
fn test_string_pct_q_upper_backslash_case_0() {
    assert_scanned!("%Q\\x07\\",
                    :tSTRING_BEG,     Some("%Q\\"), [0, 3],
                    :tSTRING_CONTENT, Some("a"),    [3, 4],
                    :tSTRING_END,     Some("\\"),   [4, 5]);
}

#[test]
fn test_string_pct_w_upper_case_0() {
    assert_scanned!("%W[s1 s2\ns3]",
                    :tWORDS_BEG,      Some("%W["), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),  [3, 5],
                    :tSPACE,          None,        [5, 6],
                    :tSTRING_CONTENT, Some("s2"),  [6, 8],
                    :tSPACE,          None,        [8, 9],
                    :tSTRING_CONTENT, Some("s3"),  [9, 11],
                    :tSPACE,          None,        [11, 11],
                    :tSTRING_END,     Some("]"),   [11, 12]);
}

#[test]
fn test_string_pct_w_upper_bs_nl_case_0() {
    assert_scanned!("%W[s1 \\\ns2]",
                    :tWORDS_BEG,      Some("%W["),  [0, 3],
                    :tSTRING_CONTENT, Some("s1"),   [3, 5],
                    :tSPACE,          None,         [5, 6],
                    :tSTRING_CONTENT, Some("\ns2"), [6, 10],
                    :tSPACE,          None,         [10, 10],
                    :tSTRING_END,     Some("]"),    [10, 11]);
}

#[test]
fn test_string_pct_w_upper_interp_case_0() {
    assert_scanned!("%W[#{1}#{2} #@a]",
                    :tWORDS_BEG,   Some("%W["), [0, 3],
                    :tSTRING_DBEG, Some("#{"),  [3, 5],
                    :tINTEGER,     Some("1"),   [5, 6],
                    :tRCURLY,      Some("}"),   [6, 7],
                    :tSTRING_DBEG, Some("#{"),  [7, 9],
                    :tINTEGER,     Some("2"),   [9, 10],
                    :tRCURLY,      Some("}"),   [10, 11],
                    :tSPACE,       None,        [11, 12],
                    :tSTRING_DVAR, None,        [12, 13],
                    :tIVAR,        Some("@a"),  [13, 15],
                    :tSPACE,       None,        [15, 15],
                    :tSTRING_END,  Some("]"),   [15, 16]);
}

#[test]
fn test_string_pct_angle_case_0() {
    assert_scanned!("%<blah>",
                    :tSTRING_BEG,     Some("%<"),   [0, 2],
                    :tSTRING_CONTENT, Some("blah"), [2, 6],
                    :tSTRING_END,     Some(">"),    [6, 7]);
}

#[test]
fn test_string_pct_backslash_case_0() {
    assert_scanned!("%\\x07\\",
                    :tSTRING_BEG,     Some("%\\"), [0, 2],
                    :tSTRING_CONTENT, Some("a"),   [2, 3],
                    :tSTRING_END,     Some("\\"),  [3, 4]);
}

#[test]
fn test_string_pct_i_case_0() {
    assert_scanned!("%i(s1 s2)",
                    :tQSYMBOLS_BEG,   Some("%i("), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),  [3, 5],
                    :tSPACE,          None,        [5, 6],
                    :tSTRING_CONTENT, Some("s2"),  [6, 8],
                    :tSPACE,          None,        [8, 8],
                    :tSTRING_END,     Some(")"),   [8, 9]);
}

#[test]
fn test_string_pct_intertwined_with_heredoc_case_0() {
    assert_scanned!("<<-foo + %\\x07\nbar\nfoo\nb\\",
                    :tSTRING_BEG,     Some("<<\""),  [0, 6],
                    :tSTRING_CONTENT, Some("bar\n"), [13, 17],
                    :tSTRING_END,     Some("foo"),   [17, 20],
                    :tPLUS,           Some("+"),     [7, 8],
                    :tSTRING_BEG,     Some("%\\"),   [9, 11],
                    :tSTRING_CONTENT, Some("a\n"),   [11, 13],
                    :tSTRING_CONTENT, Some("b"),     [21, 22],
                    :tSTRING_END,     Some("\\"),    [22, 23]);
}

#[test]
fn test_string_pct_pct_case_0() {
    assert_scanned!("%%blah%",
                    :tSTRING_BEG,     Some("%%"),   [0, 2],
                    :tSTRING_CONTENT, Some("blah"), [2, 6],
                    :tSTRING_END,     Some("%"),    [6, 7]);
}

#[test]
fn test_string_pct_q_backslash_case_0() {
    assert_scanned!("%q\\x07\\",
                    :tSTRING_BEG,     Some("%q\\"), [0, 3],
                    :tSTRING_CONTENT, Some("a"),    [3, 4],
                    :tSTRING_END,     Some("\\"),   [4, 5]);
}

#[test]
fn test_string_pct_w_case_0() {
    assert_scanned!("%w[s1 s2 ]",
                    :tQWORDS_BEG,     Some("%w["), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),  [3, 5],
                    :tSPACE,          None,        [5, 6],
                    :tSTRING_CONTENT, Some("s2"),  [6, 8],
                    :tSPACE,          None,        [8, 9],
                    :tSTRING_END,     Some("]"),   [9, 10]);
}

#[test]
fn test_string_pct_w_backslash_case_0() {
    assert_scanned!("%w\\s1 s2 \\",
                    :tQWORDS_BEG,     Some("%w\\"), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),   [3, 5],
                    :tSPACE,          None,         [5, 6],
                    :tSTRING_CONTENT, Some("s2"),   [6, 8],
                    :tSPACE,          None,         [8, 9],
                    :tSTRING_END,     Some("\\"),   [9, 10]);
}

#[test]
fn test_string_pct_w_backslash_interp_nl_case_0() {
    assert_scanned!("%W\\x08lah #x a #@a b #$b c #{3} # \\",
                    :tWORDS_BEG,      Some("%W\\"), [0, 3],
                    :tSTRING_CONTENT, Some("blah"), [3, 7],
                    :tSPACE,          None,         [7, 8],
                    :tSTRING_CONTENT, Some("#x"),   [8, 10],
                    :tSPACE,          None,         [10, 11],
                    :tSTRING_CONTENT, Some("a"),    [11, 12],
                    :tSPACE,          None,         [12, 13],
                    :tSTRING_DVAR,    None,         [13, 14],
                    :tIVAR,           Some("@a"),   [14, 16],
                    :tSPACE,          None,         [16, 17],
                    :tSTRING_CONTENT, Some("b"),    [17, 18],
                    :tSPACE,          None,         [18, 19],
                    :tSTRING_DVAR,    None,         [19, 20],
                    :tGVAR,           Some("$b"),   [20, 22],
                    :tSPACE,          None,         [22, 23],
                    :tSTRING_CONTENT, Some("c"),    [23, 24],
                    :tSPACE,          None,         [24, 25],
                    :tSTRING_DBEG,    Some("#{"),   [25, 27],
                    :tINTEGER,        Some("3"),    [27, 28],
                    :tRCURLY,         Some("}"),    [28, 29],
                    :tSPACE,          None,         [29, 30],
                    :tSTRING_CONTENT, Some("#"),    [30, 31],
                    :tSPACE,          None,         [31, 32],
                    :tSTRING_END,     Some("\\"),   [32, 33]);
}

#[test]
fn test_string_pct_w_backslash_nl_case_0() {
    assert_scanned!("%w\\s1 s2 \\\n",
                    :tQWORDS_BEG,     Some("%w\\"), [0, 3],
                    :tSTRING_CONTENT, Some("s1"),   [3, 5],
                    :tSPACE,          None,         [5, 6],
                    :tSTRING_CONTENT, Some("s2"),   [6, 8],
                    :tSPACE,          None,         [8, 9],
                    :tSTRING_END,     Some("\\"),   [9, 10],
                    :tNL,             None,         [10, 11]);
}

#[test]
fn test_string_pct_w_bs_nl_case_0() {
    assert_scanned!("%w[s1 \\\ns2]",
                    :tQWORDS_BEG,     Some("%w["),  [0, 3],
                    :tSTRING_CONTENT, Some("s1"),   [3, 5],
                    :tSPACE,          None,         [5, 6],
                    :tSTRING_CONTENT, Some("\ns2"), [6, 10],
                    :tSPACE,          None,         [10, 10],
                    :tSTRING_END,     Some("]"),    [10, 11]);
}

#[test]
fn test_string_pct_w_bs_sp_case_0() {
    assert_scanned!("%w[s\\ 1 s\\ 2]",
                    :tQWORDS_BEG,     Some("%w["), [0, 3],
                    :tSTRING_CONTENT, Some("s 1"), [3, 7],
                    :tSPACE,          None,        [7, 8],
                    :tSTRING_CONTENT, Some("s 2"), [8, 12],
                    :tSPACE,          None,        [12, 12],
                    :tSTRING_END,     Some("]"),   [12, 13]);
}

#[test]
fn test_string_pct_w_tab_case_0() {
    assert_scanned!("%w[abc\tdef]",
                    :tQWORDS_BEG,     Some("%w["), [0, 3],
                    :tSTRING_CONTENT, Some("abc"), [3, 6],
                    :tSPACE,          None,        [6, 7],
                    :tSTRING_CONTENT, Some("def"), [7, 10],
                    :tSPACE,          None,        [10, 10],
                    :tSTRING_END,     Some("]"),   [10, 11]);
}

#[test]
fn test_string_single_case_0() {
    assert_scanned!("'string'",
                    :tSTRING, Some("string"), [0, 8]);
}

#[test]
fn test_string_single_escape_chars_case_0() {
    assert_scanned!("'s\\tri\\ng'",
                    :tSTRING, Some("s\\tri\\ng"), [0, 10]);
}

#[test]
fn test_string_single_nl_case_0() {
    assert_scanned!("'blah\\\nblah'",
                    :tSTRING_BEG,     Some("'"),        [0, 1],
                    :tSTRING_CONTENT, Some("blah\\\n"), [1, 7],
                    :tSTRING_CONTENT, Some("blah"),     [7, 11],
                    :tSTRING_END,     Some("'"),        [11, 12]);
}

#[test]
fn test_symbol_case_0() {
    assert_scanned!(":symbol",
                    :tSYMBOL, Some("symbol"), [0, 7]);
}

#[test]
fn test_symbol_double_case_0() {
    assert_scanned!(":\"symbol\"",
                    :tSYMBEG,         Some(":\""),    [0, 2],
                    :tSTRING_CONTENT, Some("symbol"), [2, 8],
                    :tSTRING_END,     Some("\""),     [8, 9]);
}

#[test]
fn test_symbol_single_case_0() {
    assert_scanned!(":'symbol'",
                    :tSYMBEG,         Some(":'"),     [0, 2],
                    :tSTRING_CONTENT, Some("symbol"), [2, 8],
                    :tSTRING_END,     Some("'"),      [8, 9]);
}

#[test]
fn test_ternary_case_0() {
    assert_scanned!("a ? b : c",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tEH,         Some("?"), [2, 3],
                    :tIDENTIFIER, Some("b"), [4, 5],
                    :tCOLON,      Some(":"), [6, 7],
                    :tIDENTIFIER, Some("c"), [8, 9]);
}

#[test]
fn test_ternary_case_1() {
    assert_scanned!("a ?b : c",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tINTEGER,    Some("98"), [2, 4],
                    :tCOLON,      Some(":"),  [5, 6],
                    :tIDENTIFIER, Some("c"),  [7, 8]);
}

#[test]
fn test_ternary_case_2() {
    assert_scanned!("a ?bb : c",
                    :tIDENTIFIER, Some("a"),  [0, 1],
                    :tEH,         Some("?"),  [2, 3],
                    :tIDENTIFIER, Some("bb"), [3, 5],
                    :tCOLON,      Some(":"),  [6, 7],
                    :tIDENTIFIER, Some("c"),  [8, 9]);
}

#[test]
fn test_ternary_case_3() {
    assert_scanned!("42 ?",
                    :tINTEGER, Some("42"), [0, 2],
                    :tEH,      Some("?"),  [3, 4]);
}

#[test]
fn test_tilde_case_0() {
    assert_scanned!("~",
                    :tTILDE, Some("~"), [0, 1]);
}

#[test]
fn test_tilde_unary_case_0() {
    assert_scanned!("~@",
                    :tTILDE, Some("~@"), [0, 2]);
}

#[test]
fn test_transcoded_source_is_converted_back_to_original_encoding_case_0() {
    assert_scanned!("\"a\" + \"b\"",
                    :tSTRING, Some("a"), [0, 3],
                    :tPLUS,   Some("+"), [4, 5],
                    :tSTRING, Some("b"), [6, 9]);
}

#[test]
fn test_uminus_case_0() {
    assert_scanned!("-blah",
                    :tUMINUS,     Some("-"),    [0, 1],
                    :tIDENTIFIER, Some("blah"), [1, 5]);
}

#[test]
fn test_underscore_case_0() {
    assert_scanned!("_var",
                    :tIDENTIFIER, Some("_var"), [0, 4]);
}

#[test]
fn test_underscore_end_case_0() {
    assert_scanned!("__END__\n",
                    );
}

#[test]
fn test_underscore_end_case_1() {
    assert_scanned!("__END__",
                    );
}

#[test]
fn test_underscore_end_case_2() {
    assert_scanned!("__END__ foo",
                    :tIDENTIFIER, Some("__END__"), [0, 7],
                    :tIDENTIFIER, Some("foo"),     [8, 11]);
}

#[test]
fn test_underscore_end_case_3() {
    assert_scanned!("__END__\rfoo",
                    :tIDENTIFIER, Some("__END__"), [0, 7],
                    :tIDENTIFIER, Some("foo"),     [8, 11]);
}

#[test]
fn test_uplus_case_0() {
    assert_scanned!("+blah",
                    :tUPLUS,      Some("+"),    [0, 1],
                    :tIDENTIFIER, Some("blah"), [1, 5]);
}

#[test]
fn test_whitespace_arg_case_0() {
    assert_scanned!("+",
                    :tPLUS, Some("+"), [0, 1]);
}

#[test]
fn test_whitespace_arg_case_1() {
    assert_scanned!(" +",
                    :tUPLUS, Some("+"), [1, 2]);
}


#[test]
fn test_whitespace_arg_case_3() {
    assert_scanned!("\\\n+",
                    :tUPLUS, Some("+"), [2, 3]);
}

#[test]
fn test_whitespace_arg_case_4() {
    assert_scanned!("\\\n +",
                    :tUPLUS, Some("+"), [3, 4]);
}

#[test]
fn test_whitespace_arg_case_5() {
    assert_scanned!("#foo\n+",
                    :tNL,    None,      [4, 5],
                    :tUPLUS, Some("+"), [5, 6]);
}

#[test]
fn test_whitespace_beg_case_0() {
    assert_scanned!("+",
                    :tUPLUS, Some("+"), [0, 1]);
}

#[test]
fn test_whitespace_beg_case_1() {
    assert_scanned!(" +",
                    :tUPLUS, Some("+"), [1, 2]);
}


#[test]
fn test_whitespace_beg_case_3() {
    assert_scanned!("\\\n+",
                    :tUPLUS, Some("+"), [2, 3]);
}

#[test]
fn test_whitespace_beg_case_4() {
    assert_scanned!("#foo\n+",
                    :tUPLUS, Some("+"), [5, 6]);
}

#[test]
fn test_whitespace_cr_case_0() {
    assert_scanned!("<<E\nfoo\nE\rO",
                    :tSTRING_BEG,     Some("<<\""),  [0, 3],
                    :tSTRING_CONTENT, Some("foo\n"), [4, 8],
                    :tSTRING_END,     Some("E"),     [8, 11],
                    :tNL,             None,          [3, 4]);
}

#[test]
fn test_whitespace_dot_case_0() {
    assert_scanned!("class",
                    :tIDENTIFIER, Some("class"), [0, 5]);
}

#[test]
fn test_whitespace_dot_case_1() {
    assert_scanned!(" class",
                    :tIDENTIFIER, Some("class"), [1, 6]);
}


#[test]
fn test_whitespace_dot_case_3() {
    assert_scanned!("\\\nclass",
                    :tIDENTIFIER, Some("class"), [2, 7]);
}

#[test]
fn test_whitespace_dot_case_4() {
    assert_scanned!("#foo\nclass",
                    :tIDENTIFIER, Some("class"), [5, 10]);
}

#[test]
fn test_whitespace_end_case_0() {
    assert_scanned!("+ 1",
                    :tPLUS,    Some("+"), [0, 1],
                    :tINTEGER, Some("1"), [2, 3]);
}

#[test]
fn test_whitespace_end_case_1() {
    assert_scanned!(" + 1",
                    :tPLUS,    Some("+"), [1, 2],
                    :tINTEGER, Some("1"), [3, 4]);
}


#[test]
fn test_whitespace_end_case_3() {
    assert_scanned!("\\\n+ 1",
                    :tPLUS,    Some("+"), [2, 3],
                    :tINTEGER, Some("1"), [4, 5]);
}

#[test]
fn test_whitespace_end_case_4() {
    assert_scanned!("#foo\n+ 1",
                    :tNL,        None,      [4, 5],
                    :tUNARY_NUM, Some("+"), [5, 6],
                    :tINTEGER,   Some("1"), [7, 8]);
}

#[test]
fn test_whitespace_endarg_case_0() {
    assert_scanned!("{",
                    :tLBRACE_ARG, Some("{"), [0, 1]);
}

#[test]
fn test_whitespace_endarg_case_1() {
    assert_scanned!(" {",
                    :tLBRACE_ARG, Some("{"), [1, 2]);
}


#[test]
fn test_whitespace_endarg_case_3() {
    assert_scanned!("\\\n{",
                    :tLBRACE_ARG, Some("{"), [2, 3]);
}

#[test]
fn test_whitespace_endarg_case_4() {
    assert_scanned!("#foo\n{",
                    :tNL,     None,      [4, 5],
                    :tLBRACE, Some("{"), [5, 6]);
}

#[test]
fn test_whitespace_endfn_case_0() {
    assert_scanned!("foo:",
                    :tLABEL, Some("foo"), [0, 4]);
}

#[test]
fn test_whitespace_endfn_case_1() {
    assert_scanned!(" foo:",
                    :tLABEL, Some("foo"), [1, 5]);
}



#[test]
fn test_whitespace_endfn_case_4() {
    assert_scanned!("\\\nfoo:",
                    :tLABEL, Some("foo"), [2, 6]);
}

#[test]
fn test_whitespace_endfn_case_5() {
    assert_scanned!("#foo\nfoo:",
                    :tNL,         None,        [4, 5],
                    :tIDENTIFIER, Some("foo"), [5, 8],
                    :tCOLON,      Some(":"),   [8, 9]);
}

#[test]
fn test_whitespace_endfn_case_6() {
    assert_scanned!("#foo\nfoo: ",
                    :tNL,         None,        [4, 5],
                    :tIDENTIFIER, Some("foo"), [5, 8],
                    :tCOLON,      Some(":"),   [8, 9]);
}

#[test]
fn test_whitespace_fname_case_0() {
    assert_scanned!("class",
                    :kCLASS, Some("class"), [0, 5]);
}

#[test]
fn test_whitespace_fname_case_1() {
    assert_scanned!(" class",
                    :kCLASS, Some("class"), [1, 6]);
}


#[test]
fn test_whitespace_fname_case_3() {
    assert_scanned!("\\\nclass",
                    :kCLASS, Some("class"), [2, 7]);
}

#[test]
fn test_whitespace_fname_case_4() {
    assert_scanned!("#foo\nclass",
                    :kCLASS, Some("class"), [5, 10]);
}

#[test]
fn test_whitespace_mid_case_0() {
    assert_scanned!("+",
                    :tUPLUS, Some("+"), [0, 1]);
}

#[test]
fn test_whitespace_mid_case_1() {
    assert_scanned!(" +",
                    :tUPLUS, Some("+"), [1, 2]);
}


#[test]
fn test_whitespace_mid_case_3() {
    assert_scanned!("\\\n+",
                    :tUPLUS, Some("+"), [2, 3]);
}

#[test]
fn test_whitespace_mid_case_4() {
    assert_scanned!("#foo\n+",
                    :tNL,    None,      [4, 5],
                    :tUPLUS, Some("+"), [5, 6]);
}

#[test]
fn test_whitespace_value_case_0() {
    assert_scanned!("a:b",
                    :tIDENTIFIER, Some("a"), [0, 1],
                    :tSYMBOL,     Some("b"), [1, 3]);
}

#[test]
fn test_whitespace_value_case_1() {
    assert_scanned!(" a:b",
                    :tIDENTIFIER, Some("a"), [1, 2],
                    :tSYMBOL,     Some("b"), [2, 4]);
}


#[test]
fn test_whitespace_value_case_3() {
    assert_scanned!("\\\na:b",
                    :tIDENTIFIER, Some("a"), [2, 3],
                    :tSYMBOL,     Some("b"), [3, 5]);
}

#[test]
fn test_whitespace_value_case_4() {
    assert_scanned!("#foo\na:b",
                    :tIDENTIFIER, Some("a"), [5, 6],
                    :tSYMBOL,     Some("b"), [6, 8]);
}

