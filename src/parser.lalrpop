use crate::lexer::Token;
use crate::lexer::{LexError, TokenData, State};
use std::rc::Rc;
use std::cell::RefCell;

#[LALR]
grammar(state: &Rc<RefCell<State>>);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token {
        "tINTEGER" => Token::tINTEGER(<String>, <usize>, <usize>),
        "tPLUS" => Token::tPLUS(<String>, <usize>, <usize>),
    }
}

pub Program: String = {
    <n:number> <p:"tPLUS"> <n2:number> => format!("{:?} + {:?} + {:?} {:#?}", n, p, n2, state.borrow())
};

number: TokenData = {
    <n:"tINTEGER"> => n
}

op: TokenData = {
    "tPLUS"
}
