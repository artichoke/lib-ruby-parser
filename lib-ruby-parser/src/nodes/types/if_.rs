// This file is autogenerated by codegen/rust/node_file.liquid

use crate::nodes::InnerNode;
use crate::nodes::InspectVec;
use crate::Loc;
use crate::Node;

/// Represents an `if` statement (i.e. `if foo; bar; else; baz; end`)
#[derive(Debug, Clone, PartialEq)]
#[repr(C)]
pub struct If {
    /// Condition given to the `if` statement, `Lvar("a")` for `if a; b; else; c; end`
    pub cond: Box<Node>,

    /// True-branch of the `if` statement, `Lvar("b")` for `if a; b; else; c; end`
    pub if_true: Option<Box<Node>>,

    /// False-branch of the `if` statement, `Lvar("c")` for `if a; b; else; c; end`
    pub if_false: Option<Box<Node>>,

    /// Location of the `if` keyword
    ///
    /// ```text
    /// if foo; end
    /// ~~
    /// ```
    pub keyword_l: Loc,

    /// Location of the `then` keyword
    ///
    /// ```text
    /// if foo then; end
    ///        ~~~~
    /// ```
    ///
    /// `None` if `then` keyword is omitted
    pub begin_l: Loc,

    /// Location of the `else` keyword
    ///
    /// ```text
    /// if foo; else; end
    ///         ~~~~
    /// ```
    ///
    /// `None` if there's no `else` branch
    pub else_l: Option<Loc>,

    /// Location of the `end` keyword
    ///
    /// ```text
    /// if foo; end
    ///         ~~~
    /// ```
    pub end_l: Option<Loc>,

    /// Location of the full expression
    ///
    /// ```text
    /// if a then; b; else; c end
    /// ~~~~~~~~~~~~~~~~~~~~~~~~~
    /// ```
    pub expression_l: Loc,

}

impl InnerNode for If {
    fn expression(&self) -> &Loc {
        &self.expression_l
    }

    fn inspected_children(&self, indent: usize) -> Vec<String> {
        let mut result = InspectVec::new(indent);
        result.push_node(&self.cond);
        result.push_maybe_node_or_nil(&self.if_true);
        result.push_maybe_node_or_nil(&self.if_false);
        
        result.strings()
    }

    fn str_type(&self) -> &'static str {
        "if"
    }

    fn print_with_locs(&self) {
        println!("{}", self.inspect(0));
        self.cond.inner_ref().print_with_locs();
        if let Some(node) = self.if_true.as_ref() { node.inner_ref().print_with_locs() }
        if let Some(node) = self.if_false.as_ref() { node.inner_ref().print_with_locs() }
        self.keyword_l.print("keyword");
        self.begin_l.print("begin");
        if let Some(loc) = self.else_l.as_ref() { loc.print("else") }
        if let Some(loc) = self.end_l.as_ref() { loc.print("end") }
        self.expression_l.print("expression");
        
    }
}
