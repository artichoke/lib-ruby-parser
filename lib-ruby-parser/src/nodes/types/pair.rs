// This file is autogenerated by codegen/rust/node_file.liquid

use crate::nodes::InnerNode;
use crate::nodes::InspectVec;
use crate::Loc;
use crate::Node;

/// Represents a key/value pair (e.g. a part of the `Hash` node)
#[derive(Debug, Clone, PartialEq)]
#[repr(C)]
pub struct Pair {
    /// Key of the pair
    pub key: Box<Node>,

    /// Value of the pair
    pub value: Box<Node>,

    /// Location of the `:` or `=>` operator
    ///
    /// ```text
    /// { foo: bar }
    ///      ~
    ///
    /// { :foo => bar }
    ///        ~~
    /// ```
    pub operator_l: Loc,

    /// Location of the full expression
    ///
    /// ```text
    /// { foo: bar }
    ///   ~~~~~~~~
    ///
    /// { :foo => bar }
    ///   ~~~~~~~~~~~
    /// ```
    pub expression_l: Loc,

}

impl InnerNode for Pair {
    fn expression(&self) -> &Loc {
        &self.expression_l
    }

    fn inspected_children(&self, indent: usize) -> Vec<String> {
        let mut result = InspectVec::new(indent);
        result.push_node(&self.key);
        result.push_node(&self.value);
        
        result.strings()
    }

    fn str_type(&self) -> &'static str {
        "pair"
    }

    fn print_with_locs(&self) {
        println!("{}", self.inspect(0));
        self.key.inner_ref().print_with_locs();
        self.value.inner_ref().print_with_locs();
        self.operator_l.print("operator");
        self.expression_l.print("expression");
        
    }
}
