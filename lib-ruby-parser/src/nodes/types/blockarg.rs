// This file is autogenerated by codegen/rust/node_file.liquid

use crate::nodes::InnerNode;
use crate::nodes::InspectVec;
use crate::Loc;


/// Represents a `&blk` argument in the method definition (but not in the method call, see `BlockPass`)
#[derive(Debug, Clone, PartialEq)]
#[repr(C)]
pub struct Blockarg {
    /// Name of the argument, `String("foo")` for `def m(&foo)`
    pub name: Option<String>,

    /// Location of the `&` operator
    ///
    /// ```text
    /// def m(&foo); end
    ///       ~
    /// ```
    pub operator_l: Loc,

    /// Location of the name
    ///
    /// ```text
    /// def m(&foo); end
    ///        ~~~
    /// ```
    pub name_l: Option<Loc>,

    /// Location of the full expression
    ///
    /// ```text
    /// def m(&foo); end
    ///       ~~~~
    /// ```
    pub expression_l: Loc,

}

impl InnerNode for Blockarg {
    fn expression(&self) -> &Loc {
        &self.expression_l
    }

    fn inspected_children(&self, indent: usize) -> Vec<String> {
        let mut result = InspectVec::new(indent);
        result.push_maybe_str_or_nil(&self.name);
        
        result.strings()
    }

    fn str_type(&self) -> &'static str {
        "blockarg"
    }

    fn print_with_locs(&self) {
        println!("{}", self.inspect(0));
        self.operator_l.print("operator");
        if let Some(loc) = self.name_l.as_ref() { loc.print("name") }
        self.expression_l.print("expression");
        
    }
}
