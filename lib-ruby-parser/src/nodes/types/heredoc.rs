// This file is autogenerated by codegen/rust/node_file.liquid

use crate::nodes::InnerNode;
use crate::nodes::InspectVec;
use crate::Loc;
use crate::Node;

/// Represents a here-document literal (both with and without interpolation)
///
/// It's similar to `Dstr` in terms of abstract syntax tree, but has different source maps.
#[derive(Debug, Clone, PartialEq)]
#[repr(C)]
pub struct Heredoc {
    /// A list of string parts (static literals and interpolated expressions)
    pub parts: Vec<Node>,

    /// Location of the here-document body
    ///
    /// ```text
    /// <<-HERE\n  a\n   #{42}\nHERE
    /// ~~~~~~~~~~~~~~~
    /// ```
    pub heredoc_body_l: Loc,

    /// Location of the here-document end
    ///
    /// ```text
    /// <<-HERE\n  a\n   #{42}\nHERE
    ///                         ~~~~
    /// ```
    pub heredoc_end_l: Loc,

    /// Location of the here-document identifier
    ///
    /// ```text
    /// <<-HERE\n  a\n   #{42}\nHERE
    /// ~~~~~~~
    /// ```
    ///
    /// **Note**: This is the only node (with `XHeredoc`) that has `expression_l` smaller that all other sub-locations merged.
    /// The reason for that is that it's possible to add more code after here-document ID:
    ///
    /// ```text
    /// <<-HERE + "rest"
    /// content
    /// HERE
    /// ```
    pub expression_l: Loc,

}

impl InnerNode for Heredoc {
    fn expression(&self) -> &Loc {
        &self.expression_l
    }

    fn inspected_children(&self, indent: usize) -> Vec<String> {
        let mut result = InspectVec::new(indent);
        result.push_nodes(&self.parts);
        
        result.strings()
    }

    fn str_type(&self) -> &'static str {
        "dstr"
    }

    fn print_with_locs(&self) {
        println!("{}", self.inspect(0));
        for node in self.parts.iter() { node.inner_ref().print_with_locs(); }
        self.heredoc_body_l.print("heredoc_body");
        self.heredoc_end_l.print("heredoc_end");
        self.expression_l.print("expression");
        
    }
}
