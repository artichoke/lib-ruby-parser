use crate::codegen::c::helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is autogenerated by {generator}
#include \"bindings_messages.h\"

{constructors}

{variant_getters}

{getters}

{predicates}

void lib_ruby_parser__internal__containers__diagnostic_message__drop(DiagnosticMessage_BLOB *blob)
{{
    DiagnosticMessage *message = (DiagnosticMessage *)blob;
    drop_diagnostic_message(message);
}}
",
        generator = file!(),
        constructors = messages.map(&constructor).join("\n\n"),
        variant_getters = messages.map(&variant_getter).join("\n\n"),
        getters = messages.flat_map(&getters).join("\n\n"),
        predicates = messages.map(&predicate).join("\n\n")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/c/bindings_messages.c", contents()).unwrap();
}

fn constructor(message: &lib_ruby_parser_nodes::Message) -> String {
    let initializer_list = message
        .fields
        .map(&|field| {
            format!(
                ".{name} = UNPACK_{t}({name})",
                name = helpers::messages::fields::field_name(field),
                t = helpers::messages::fields::field_type(field)
            )
        })
        .join(", ");

    format!(
            "{signature}
{{
    {inner_t} inner = {{ {initializer_list} }};
    DiagnosticMessage message = {{ .tag = {enum_tag_name}, .as = {{ .{union_variant_name} = inner }} }};
    return PACK_DiagnosticMessage(message);
}}",
            signature = helpers::messages::constructor::sig(message),
            inner_t = message.camelcase_name(),
            initializer_list = initializer_list,
            enum_tag_name = message.upper_name(),
            union_variant_name = message.lower_name()
        )
}
fn variant_getter(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{sig}
{{
    const DiagnosticMessage *message = (const DiagnosticMessage *)blob;
    if (message->tag == {tag_name}) {{
        return (const {variant_name}_BLOB*)(&(message->as.{union_member}));
    }} else {{
        return NULL;
    }}
}}",
        sig = helpers::messages::variant_getter::sig(message),
        tag_name = message.upper_name(),
        variant_name = message.camelcase_name(),
        union_member = message.lower_name()
    )
}
fn getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        format!(
            "{signature}
{{
    const {variant_name} *variant = (const {variant_name} *)blob;
    return (const {blob_type} *)(&(variant->{field_name}));
}}",
            signature = helpers::messages::getter::sig(message, field),
            variant_name = message.camelcase_name(),
            field_name = helpers::messages::fields::field_name(field),
            blob_type = helpers::messages::fields::blob_type(field),
        )
    })
}
fn predicate(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature}
{{
    return ((const DiagnosticMessage *)blob)->tag == {enum_tag_name};
}}",
        signature = helpers::messages::type_predicate::sig(message),
        enum_tag_name = message.upper_name()
    )
}
