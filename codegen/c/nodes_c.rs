use lib_ruby_parser_nodes::template::*;

const TEMPLATE: &str = "// This file is autogenerated by <helper generated-by>

#include \"structs.h\"
#include <stdio.h>
#include <stdlib.h>

// drop variant fns
<each-node>
void LIB_RUBY_PARSER_drop_node_<helper node-lower-name>(LIB_RUBY_PARSER_<helper node-camelcase-name> *variant) {
<each-node-field><dnl>
    <helper drop-field-fn>(&(variant-><helper node-field-c-name>));
</each-node-field>
}
</each-node>

void LIB_RUBY_PARSER_drop_node(LIB_RUBY_PARSER_Node *node)
{
    switch (node->tag)
    {
<each-node><dnl>
    case <helper node-c-enum-variant-name>:
        LIB_RUBY_PARSER_drop_node_<helper node-lower-name>(&(node->as.<helper node-c-union-member-name>));
        break;
</each-node>
    }
}

void LIB_RUBY_PARSER_drop_maybe_node_ptr(LIB_RUBY_PARSER_Node **node)
{
    LIB_RUBY_PARSER_Node *ptr = *node;
    if (ptr) {
        LIB_RUBY_PARSER_drop_node(ptr);
        free(ptr);
    }
}

void LIB_RUBY_PARSER_drop_node_ptr(LIB_RUBY_PARSER_Node **node)
{
    LIB_RUBY_PARSER_Node *ptr = *node;
    LIB_RUBY_PARSER_drop_node(ptr);
    free(ptr);
}

void lib_ruby_parser__external__list__of_nodes__drop(LIB_RUBY_PARSER_NodeList *);
void LIB_RUBY_PARSER_drop_node_list(LIB_RUBY_PARSER_NodeList *node_list)
{
    lib_ruby_parser__external__list__of_nodes__drop(node_list);
}
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let mut fns = crate::codegen::fns::default_fns!();

    fns.register_helper("drop-field-fn", local_helpers::drop_fn_name);

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("external/c/nodes.c", contents).unwrap();
}

mod local_helpers {
    use lib_ruby_parser_nodes::NodeWithField;

    pub(crate) fn drop_fn_name(node_with_field: &NodeWithField) -> String {
        use lib_ruby_parser_nodes::NodeFieldType::*;

        match node_with_field.field.field_type {
            Node => "LIB_RUBY_PARSER_drop_node_ptr",
            Nodes => "LIB_RUBY_PARSER_drop_node_list",
            MaybeNode { .. } => "LIB_RUBY_PARSER_drop_maybe_node_ptr",
            Loc => "LIB_RUBY_PARSER_drop_loc",
            MaybeLoc => "LIB_RUBY_PARSER_drop_maybe_loc",

            Str { .. } => "LIB_RUBY_PARSER_drop_string_ptr",

            MaybeStr { .. } => "LIB_RUBY_PARSER_drop_maybe_string_ptr",
            StringValue => "LIB_RUBY_PARSER_drop_bytes",
            U8 => "LIB_RUBY_PARSER_drop_byte",
        }
        .to_string()
    }
}
