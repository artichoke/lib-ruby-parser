use crate::codegen::c::helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "#ifndef LIB_RUBY_PARSER_EXTERNAL_C_SHARED_BINDINGS_MESSAGES_H
#define LIB_RUBY_PARSER_EXTERNAL_C_SHARED_BINDINGS_MESSAGES_H

// This file is autogenerated by {generator}

#include \"messages.h\"
#include \"blobs.h\"

{constructors}

{variant_getters}

{getters}

{predicates}

void lib_ruby_parser__internal__containers__diagnostic_message__drop(DiagnosticMessage_BLOB *blob);

#endif // LIB_RUBY_PARSER_EXTERNAL_C_SHARED_BINDINGS_MESSAGES_H
",
        generator = file!(),
        constructors = messages.map(&constructor).join("\n"),
        variant_getters = messages.map(&variant_getter).join("\n"),
        getters = messages.flat_map(&getters).join("\n"),
        predicates = messages.map(&predicate).join("\n")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/c/bindings_messages.h", contents()).unwrap();
}

fn constructor(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature};",
        signature = helpers::messages::constructor::sig(message)
    )
}
fn variant_getter(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature};",
        signature = helpers::messages::variant_getter::sig(message)
    )
}
fn getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        format!(
            "{signature};",
            signature = helpers::messages::getter::sig(message, field)
        )
    })
}
fn predicate(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature};",
        signature = helpers::messages::type_predicate::sig(message)
    )
}
