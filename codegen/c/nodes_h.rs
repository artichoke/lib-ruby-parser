use crate::codegen::c::helpers;

fn contents() -> String {
    let nodes = lib_ruby_parser_nodes::nodes();

    format!(
        "#ifndef LIB_RUBY_PARSER_EXTERNAL_C_NODES_H
#define LIB_RUBY_PARSER_EXTERNAL_C_NODES_H

// This file is autogenerated by {generator}

#include \"structs.h\"
#include \"declare_blob.h\"

struct Node;
typedef struct Node Node;
struct Node_BLOB;
typedef struct Node_BLOB Node_BLOB;
DECLARE_LIST_OF(Node, NodeList);

typedef Node* NodePtr;
typedef Node* MaybeNodePtr;

{structs}

struct Node {{
    enum {{
        {enum_variants}
    }} tag;
    union {{
        {union_members}
    }} as;
}};

DECLARE_BLOB_FOR(Node);
DECLARE_BLOB_FOR(NodeList);

// print-sizes macro
#define NODE_PRINT_SIZES \\
    {print_sizes}

{drop_fns}

void drop_node(Node *node);
void drop_maybe_node_ptr(Node **node);
void drop_node_ptr(Node **node);
void drop_node_list(NodeList *node_list);

#endif // LIB_RUBY_PARSER_EXTERNAL_C_NODES_H
",
        generator = file!(),
        structs = nodes.map(&struct_declaration).join("\n\n"),
        enum_variants = nodes.map(&enum_variant).join(",\n    "),
        union_members = nodes.map(&union_member).join("\n        "),
        print_sizes = nodes.map(&print_size).join(" \\\n    "),
        drop_fns = nodes.map(&drop_fn).join("\n")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/c/nodes.h", contents()).unwrap();
}

fn struct_declaration(node: &lib_ruby_parser_nodes::Node) -> String {
    let fields = node.fields.map(&|field| {
        format!(
            "{} {};",
            helpers::nodes::fields::field_type(field),
            helpers::nodes::fields::field_name(field)
        )
    });

    format!(
        "typedef struct
{{
    {fields}
}} {struct_name};
DECLARE_BLOB_FOR({struct_name});",
        struct_name = node.camelcase_name(),
        fields = fields.join("\n    ")
    )
}
fn enum_variant(node: &lib_ruby_parser_nodes::Node) -> String {
    helpers::nodes::enum_variant_name(node)
}
fn union_member(node: &lib_ruby_parser_nodes::Node) -> String {
    format!(
        "{node_type} {union_member_name};",
        node_type = node.camelcase_name(),
        union_member_name = helpers::nodes::union_member_name(node)
    )
}

fn print_size(node: &lib_ruby_parser_nodes::Node) -> String {
    format!(
        "printf(\"LIB_RUBY_PARSER_NODE_{upper}_SIZE=%lu\\n\", sizeof({struct_name}));",
        upper = node.upper_name(),
        struct_name = node.camelcase_name()
    )
}

fn drop_fn(node: &lib_ruby_parser_nodes::Node) -> String {
    format!(
        "void drop_node_{lower}({struct_name} *variant);",
        lower = node.lower_name(),
        struct_name = node.camelcase_name()
    )
}
