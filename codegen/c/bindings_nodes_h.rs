use crate::codegen::c::helpers;

fn contents() -> String {
    let nodes = lib_ruby_parser_nodes::nodes();

    format!(
        "#ifndef LIB_RUBY_PARSER_EXTERNAL_C_BINDINGS_NODES_H
#define LIB_RUBY_PARSER_EXTERNAL_C_BINDINGS_NODES_H

// This file is autogenerated by {generator}

#include \"structs.h\"
#include \"nodes.h\"
#include \"blobs.h\"

// Node constructors
{constructors}

// Node variant predicates
{variant_predicates}

// Node variant getter
{variant_getters}

// Node field getters
{field_getters}

// Node field setters
{field_setters}

{internal_structs}

// into_variant fns
{into_variant_fns}

// into_internal fns
{into_internal_fns}

// variant drop fns
{variant_drop_fns}

void lib_ruby_parser__internal__containers__node__drop(Node_BLOB* blob);

#endif // LIB_RUBY_PARSER_EXTERNAL_C_BINDINGS_NODES_H
",
        generator = file!(),
        constructors = nodes.map(&constructor).join("\n"),
        variant_predicates = nodes.map(&variant_predicate).join("\n"),
        variant_getters = nodes.map(&variant_getter).join("\n"),
        field_getters = nodes.flat_map(&field_getters).join("\n"),
        field_setters = nodes.flat_map(&field_setters).join("\n"),
        internal_structs = nodes.map(&internal_struct).join("\n\n"),
        into_variant_fns = nodes.map(&into_variant_fn).join("\n"),
        into_internal_fns = nodes.map(&into_internal_fn).join("\n"),
        variant_drop_fns = nodes.map(&variant_drop_fn).join("\n")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/c/bindings_nodes.h", contents()).unwrap();
}

fn constructor(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::constructor::sig(node))
}
fn variant_predicate(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::variant_predicate::sig(node))
}
fn variant_getter(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::variant_getter::sig(node))
}
fn field_getters(node: &lib_ruby_parser_nodes::Node) -> Vec<String> {
    node.fields
        .map(&|field| format!("{sig};", sig = helpers::nodes::getter::sig(node, field)))
}
fn field_setters(node: &lib_ruby_parser_nodes::Node) -> Vec<String> {
    node.fields
        .map(&|field| format!("{sig};", sig = helpers::nodes::setter::sig(node, field)))
}
fn internal_struct(node: &lib_ruby_parser_nodes::Node) -> String {
    let fields = node.fields.map(&|field| {
        format!(
            "{} {};",
            helpers::nodes::fields::blob_type(field),
            helpers::nodes::fields::field_name(field)
        )
    });

    format!(
        "typedef struct
{{
    {fields}
}} Internal{struct_name};",
        struct_name = node.camelcase_name(),
        fields = fields.join("\n    ")
    )
}

fn into_variant_fn(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::into_variant::sig(node))
}
fn into_internal_fn(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::into_internal::sig(node))
}
fn variant_drop_fn(node: &lib_ruby_parser_nodes::Node) -> String {
    format!("{sig};", sig = helpers::nodes::drop_variant::sig(node))
}
