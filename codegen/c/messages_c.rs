use lib_ruby_parser_nodes::template::*;

const TEMPLATE: &str = "// This file is autogenerated by <helper generated-by>
#include \"structs.h\"

<each-message><dnl>
void LIB_RUBY_PARSER_drop_message_<helper message-lower-name>(LIB_RUBY_PARSER_<helper message-camelcase-name>* variant)
{
<each-message-field><dnl>
    <helper message-field-drop-fn-name>(&(variant-><helper message-field-c-name>));
</each-message-field><dnl>
<if message-has-no-field><dnl>
    (void)variant;
<else><dnl>
</if><dnl>
}
</each-message>

void LIB_RUBY_PARSER_drop_diagnostic_message(LIB_RUBY_PARSER_DiagnosticMessage *message)
{
    switch(message->tag)
    {
<each-message><dnl>
    case LIB_RUBY_PARSER_MESSAGE_<helper message-upper-name>:
        LIB_RUBY_PARSER_drop_message_<helper message-lower-name>(&(message->as.<helper message-lower-name>));
        break;
</each-message>
    }
}
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let mut fns = crate::codegen::fns::default_fns!();

    fns.register_predicate("message-has-no-field", local_helpers::message_has_no_fields);

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("external/c/messages.c", contents).unwrap();
}

mod local_helpers {
    use lib_ruby_parser_nodes::Message;

    pub(crate) fn message_has_no_fields(message: &Message) -> bool {
        message.fields.0.is_empty()
    }
}
