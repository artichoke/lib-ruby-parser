use crate::codegen::c::helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is autogenerated by {generator}
#include \"messages.h\"
#include \"impl_blob.h\"

IMPL_BLOB(DiagnosticMessage);

{constructors}

{getters}

{predicates}
",
        generator = file!(),
        constructors = messages.map(&constructor).join("\n\n"),
        getters = messages.flat_map(&getters).join("\n\n"),
        predicates = messages.map(&predicate).join("\n\n")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/c/messages.c", contents()).unwrap();
}

fn constructor(message: &lib_ruby_parser_nodes::Message) -> String {
    let initializer_list = message
        .fields
        .map(&|field| {
            format!(
                ".{name} = UNPACK_{t}({name})",
                name = helpers::messages::field_name(field),
                t = helpers::messages::field_type(field)
            )
        })
        .join(", ");

    format!(
            "{signature}
{{
    {inner_t} inner = {{ {initializer_list} }};
    DiagnosticMessage message = {{ .tag = {enum_tag_name}, .as = {{ .{union_variant_name} = inner }} }};
    return PACK_DiagnosticMessage(message);
}}",
signature = helpers::messages::constructor_signature(message),
            inner_t = message.camelcase_name(),
            initializer_list = initializer_list,
            enum_tag_name = message.upper_name(),
            union_variant_name = message.lower_name()
        )
}
fn getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        let get_byte_field = format!(
            "return message->as.{union_variant_name}.{field_name};",
            union_variant_name = message.lower_name(),
            field_name = helpers::messages::field_name(field)
        );

        let get_string_field = format!(
            "STRING_PTR *field_ptr = &(message->as.{union_variant_name}.{field_name});
    return (STRING_PTR_BLOB *)field_ptr;",
            union_variant_name = message.lower_name(),
            field_name = helpers::messages::field_name(field)
        );

        let get_field = match field.field_type {
            lib_ruby_parser_nodes::MessageFieldType::Str => get_string_field,
            lib_ruby_parser_nodes::MessageFieldType::Byte => get_byte_field,
        };

        format!(
            "{signature}
{{
    DiagnosticMessage *message = (DiagnosticMessage *)blob;
    {get_field}
}}",
            signature = helpers::messages::getter_signature(message, field),
            get_field = get_field
        )
    })
}
fn predicate(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature}
{{
    return ((DiagnosticMessage *)blob)->tag == {enum_tag_name};
}}",
        signature = helpers::messages::type_predicate_signature(message),
        enum_tag_name = message.upper_name()
    )
}
