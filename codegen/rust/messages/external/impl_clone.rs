fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is auto-generated by {generator}

use super::{{DiagnosticMessage}};

impl Clone for DiagnosticMessage {{
    fn clone(&self) -> Self {{
        {branches} else {{
            panic!(\"unrecognized diagnostic message type\")
        }}
    }}
}}
",
        generator = file!(),
        branches = messages.map(&branch).join(" else ")
    )
}

pub(crate) fn codegen() {
    std::fs::write("src/error/message/external/impl_clone.rs", contents()).unwrap();
}

fn branch(message: &lib_ruby_parser_nodes::Message) -> String {
    let arglist = message
        .fields
        .map(&|field| {
            format!(
                "self.{prefix}_get_{field_name}().clone()",
                prefix = message.lower_name(),
                field_name = field.name
            )
        })
        .join(", ");

    format!(
        "if self.is_{message_type}() {{
            Self::new_{message_type}({arglist})
        }}",
        message_type = message.lower_name(),
        arglist = arglist
    )
}
