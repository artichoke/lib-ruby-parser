use crate::codegen::c::helpers as c_helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages().messages();

    format!(
        "// This file is auto-generated by {generator}

use crate::containers::string_ptr::external::StringBlob;
#[cfg(feature = \"compile-with-external-structures\")]
use crate::containers::ExternalStringPtr;
#[cfg(feature = \"compile-with-external-structures\")]
type StringPtr = ExternalStringPtr;
#[cfg(not(feature = \"compile-with-external-structures\"))]
type StringPtr = String;

use super::{{DiagnosticMessage, DiagnosticMessageBlob}};

extern \"C\" {{
    {extern_getters}
}}

impl DiagnosticMessage {{
    {foreign_getters}
}}
",
        generator = file!(),
        extern_getters = messages.flat_map(&extern_getters).join("\n    "),
        foreign_getters = messages.flat_map(&foreign_getters).join("\n    "),
    )
}

pub(crate) fn codegen() {
    std::fs::write("src/error/message/external/getters.rs", contents()).unwrap();
}

fn extern_getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        let getter_name = c_helpers::messages::getter_name(message, field);
        let return_type = match field.field_type {
            lib_ruby_parser_nodes::MessageFieldType::Str => "*const StringBlob",
            lib_ruby_parser_nodes::MessageFieldType::Byte => "u8",
        };

        format!(
            "fn {getter_name}(blob: *const DiagnosticMessageBlob) -> {return_type};",
            getter_name = getter_name,
            return_type = return_type
        )
    })
}

fn foreign_getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        let getter_name = c_helpers::messages::getter_name(message, field);
        let return_type = match field.field_type {
            lib_ruby_parser_nodes::MessageFieldType::Str => "&StringPtr",
            lib_ruby_parser_nodes::MessageFieldType::Byte => "u8",
        };
        let get_string_field = format!(
            "unsafe {{ ({getter_name}(message_blob_ptr) as *const StringPtr).as_ref().unwrap() }}",
            getter_name = getter_name,
        );
        let get_byte_field = format!(
            "unsafe {{ {getter_name}(message_blob_ptr) }}",
            getter_name = getter_name
        );

        let get_field = match field.field_type {
            lib_ruby_parser_nodes::MessageFieldType::Str => get_string_field,
            lib_ruby_parser_nodes::MessageFieldType::Byte => get_byte_field,
        };

        format!(
            "pub(crate) fn {prefix}_get_{field_name}(&self) -> {return_type} {{
    let message_blob_ptr: *const DiagnosticMessageBlob = &self.blob;
    {get_field}
}}",
            prefix = message.lower_name(),
            field_name = field.name,
            return_type = return_type,
            get_field = get_field
        )
    })
}
