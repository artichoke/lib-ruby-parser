fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is auto-generated by {generator}

use super::{{DiagnosticMessage}};
use crate::containers::StringPtrBlob;

extern \"C\" {{
    fn lib_ruby_parser__internal__containers__string_ptr__free(blob: StringPtrBlob);
}}

impl Drop for DiagnosticMessage {{
    fn drop(&mut self) {{
        {branches} else {{
            panic!(\"unrecognized diagnostic message type\")
        }}
    }}
}}
",
        generator = file!(),
        branches = messages.map(&branch).join(" else ")
    )
}

pub(crate) fn codegen() {
    std::fs::write("src/error/message/external/impl_drop.rs", contents()).unwrap();
}

fn branch(message: &lib_ruby_parser_nodes::Message) -> String {
    let drop_fields: Vec<String> = message
        .fields
        .0
        .iter()
        .filter(|field| {
            matches!(
                field.field_type,
                lib_ruby_parser_nodes::MessageFieldType::Str
            )
        })
        .map(|field| {
            format!(
                "let string_ptr = self.{prefix}_get_{field_name}();
            unsafe {{ lib_ruby_parser__internal__containers__string_ptr__free(string_ptr.blob) }};",
                prefix = message.lower_name(),
                field_name = field.name,
            )
        })
        .collect();

    format!(
        "if self.is_{message_type}() {{
            {drop_fields}
        }}",
        message_type = message.lower_name(),
        drop_fields = drop_fields.join("\n            ")
    )
}
