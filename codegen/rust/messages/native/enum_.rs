fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is autogenerated by {generator}

use super::variants::*;

/// Enum of all possible diagnostic message (both warnings and errors)
#[derive(Debug, Clone, PartialEq, Eq)]
#[allow(missing_docs)]
pub enum DiagnosticMessage {{
    {variants}
}}
",
        generator = file!(),
        variants = messages.map(variant).join(",\n    ")
    )
}

pub(crate) fn codegen() {
    std::fs::write("src/error/message/native/enum_.rs", contents()).unwrap();
}

fn variant(message: &lib_ruby_parser_nodes::Message) -> String {
    format!("{variant}({variant})", variant = message.camelcase_name)
}
