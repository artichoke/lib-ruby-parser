#[cfg(feature = "lib-ruby-parser-nodes")]
pub(crate) mod helpers;

#[cfg(feature = "lib-ruby-parser-nodes")]
mod bindings_messages_cpp;
#[cfg(feature = "lib-ruby-parser-nodes")]
mod messages_cpp;
#[cfg(feature = "lib-ruby-parser-nodes")]
mod messages_hpp;

#[cfg(feature = "lib-ruby-parser-nodes")]
mod bindings_nodes_cpp;
#[cfg(feature = "lib-ruby-parser-nodes")]
mod nodes_cpp;
#[cfg(feature = "lib-ruby-parser-nodes")]
mod nodes_hpp;

#[cfg(feature = "lib-ruby-parser-nodes")]
mod bindings_hpp;

#[cfg(feature = "lib-ruby-parser-nodes")]
mod blobs_gen_cpp;
#[cfg(feature = "lib-ruby-parser-nodes")]
mod blobs_gen_hpp;

#[cfg(feature = "lib-ruby-parser-nodes")]
pub(crate) fn codegen() {
    let options = codegen_options();

    bindings_messages_cpp::codegen(&options);

    messages_hpp::codegen();
    messages_cpp::codegen();

    bindings_nodes_cpp::codegen(&options);

    nodes_hpp::codegen();
    nodes_cpp::codegen();

    bindings_hpp::codegen(&options);

    blobs_gen_hpp::codegen();
    blobs_gen_cpp::codegen();
}

#[cfg(feature = "lib-ruby-parser-nodes")]
pub(crate) fn codegen_options() -> lib_ruby_parser_bindings::Options {
    let pre_code = format!(
        "// This file is autogenerated by {generator}
#include \"structs.hpp\"
#include \"blobs.hpp\"

#ifdef __cplusplus
extern \"C\" {{
#endif
",
        generator = file!()
    );

    let post_code = format!(
        "#ifdef __cplusplus
}}
#endif"
    );

    lib_ruby_parser_bindings::Options {
        pre_code,
        post_code,
        ..Default::default()
    }
}

#[cfg(not(feature = "lib-ruby-parser-nodes"))]
pub(crate) fn codegen() {
    println!("Skipping codegen in {}", file!())
}
