use lib_ruby_parser_nodes::template::*;

const TEMPLATE: &str = "// This file is autogenerated by {generator}
#include \"structs.hpp\"

namespace lib_ruby_parser
{
    // constructors
<each-message><dnl>
    <helper message-camelcase-name>::<helper message-camelcase-name>(<dnl>
<each-message-field><dnl>
<helper message-field-cpp-field-type> <helper message-field-c-name><if message-has-more-fields>, <else></if><dnl>
</each-message-field><dnl>
)<dnl>
<if message-has-no-fields><else> : </if><dnl>
<each-message-field><dnl>
<helper message-field-c-name>(std::move(<helper message-field-c-name>))<if message-has-more-fields>, <else></if><dnl>
</each-message-field>{}
</each-message><dnl>

    // variant drop fns
<each-message><dnl>
    void drop_message_<helper message-lower-name>(<helper message-camelcase-name>* variant)
    {
        variant->~<helper message-camelcase-name>();
    }
</each-message><dnl>

    DiagnosticMessage::DiagnosticMessage(diagnostic_message_variant_t variant): variant(std::move(variant)) {}
    Diagnostic::Diagnostic(
        ErrorLevel level,
        DiagnosticMessage message,
        Loc loc): level(std::move(level)),
                message(std::move(message)),
                loc(std::move(loc)) {}

    void drop_diagnostic_message(DiagnosticMessage *message)
    {
        message->~DiagnosticMessage();
    }
}
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let mut fns = crate::codegen::fns::default_fns!();

    fns.register_predicate(
        "message-has-no-fields",
        local_helpers::message_has_no_fields,
    );
    fns.register_predicate(
        "message-has-more-fields",
        local_helpers::message_has_more_fields,
    );

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("external/cpp/messages.cpp", contents).unwrap();
}

mod local_helpers {
    use lib_ruby_parser_nodes::{Message, MessageWithField};

    pub(crate) fn message_has_no_fields(message: &Message) -> bool {
        message.fields.0.is_empty()
    }

    pub(crate) fn message_has_more_fields(message_with_field: &MessageWithField) -> bool {
        let len = message_with_field.message.fields.0.len();

        for (idx, field) in message_with_field.message.fields.0.iter().enumerate() {
            if field == &message_with_field.field {
                return idx < len - 1;
            }
        }
        unreachable!("we must've caught it above")
    }
}
