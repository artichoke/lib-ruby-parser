use crate::codegen::c::helpers as c_helpers;
use crate::codegen::cpp::helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "#ifndef LIB_RUBY_PARSER_EXTERNAL_CPP_SHARED_MESSAGES_HPP
#define LIB_RUBY_PARSER_EXTERNAL_CPP_SHARED_MESSAGES_HPP

// This file is autogenerated by {generator}

#include <variant>
#include \"string_ptr.hpp\"
#include \"byte.hpp\"

{classes}

typedef std::variant<
    {variants}>
    diagnostic_message_variant_t;

class DiagnosticMessage
{{
public:
    DiagnosticMessage(diagnostic_message_variant_t variant);
    diagnostic_message_variant_t variant;
}};

_Static_assert(sizeof(DiagnosticMessage) == 24, \"wrong sizeof(DiagnosticMessage) == 24\");
DECLARE_BLOB_FOR(DiagnosticMessage);

extern \"C\"
{{
    {constructors}

    {getters}

    {predicates}
}}

#endif // LIB_RUBY_PARSER_EXTERNAL_CPP_SHARED_MESSAGES_HPP",
        generator = file!(),
        classes = messages.map(&class).join("\n\n"),
        variants = messages.map(&variant).join(",\n    "),
        constructors = messages.map(&constructor).join("\n    "),
        getters = messages.flat_map(&getters).join("\n    "),
        predicates = messages.map(&predicate).join("\n    "),
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/cpp/messages.hpp", contents()).unwrap();
}

fn class(message: &lib_ruby_parser_nodes::Message) -> String {
    let fields_declaration = {
        let decls = message.fields.map(&|field| {
            let type_name = helpers::messages::field_type(field);
            format!(
                "{t} {name};",
                t = type_name,
                name = helpers::messages::field_name(field)
            )
        });

        if decls.is_empty() {
            String::from("")
        } else {
            format!("\n    {}", decls.join("\n    "))
        }
    };

    format!(
        "class {name}
{{
public:
    {name}({constructor_arglist});{fields_declaration}
}};",
        name = message.camelcase_name(),
        constructor_arglist = helpers::messages::constructor_arglist(message),
        fields_declaration = fields_declaration
    )
}

fn variant(message: &lib_ruby_parser_nodes::Message) -> String {
    message.camelcase_name()
}

fn constructor(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature};",
        signature = c_helpers::messages::constructor_signature(message)
    )
}
fn getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        format!(
            "{signature};",
            signature = c_helpers::messages::getter_signature(message, field)
        )
    })
}
fn predicate(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature};",
        signature = c_helpers::messages::type_predicate_signature(message)
    )
}
