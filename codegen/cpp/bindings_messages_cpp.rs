use crate::codegen::c::helpers as c_helpers;

fn contents() -> String {
    let messages = lib_ruby_parser_nodes::messages();

    format!(
        "// This file is autogenerated by {generator}

#include \"bindings_messages.hpp\"

extern \"C\"
{{
    {constructors}

    {variant_getters}

    {getters}

    {predicates}

    void lib_ruby_parser__internal__containers__diagnostic_message__drop(DiagnosticMessage_BLOB *blob)
    {{
        DiagnosticMessage *message = (DiagnosticMessage *)blob;
        drop_diagnostic_message(message);
    }}
}}
",
        generator = file!(),
        constructors = messages.map(&constructor).join("\n\n    "),
        variant_getters = messages.map(&variant_getter).join("\n\n    "),
        getters = messages.flat_map(&getters).join("\n\n    "),
        predicates = messages.map(&predicate).join("\n\n    ")
    )
}

pub(crate) fn codegen() {
    std::fs::write("external/cpp/bindings_messages.cpp", contents()).unwrap();
}

fn constructor(message: &lib_ruby_parser_nodes::Message) -> String {
    let arglist = message
        .fields
        .map(&|field| {
            format!(
                "UNPACK_{t}({name})",
                name = c_helpers::messages::fields::field_name(field),
                t = c_helpers::messages::fields::field_type(field)
            )
        })
        .join(", ");

    format!(
        "{signature}
    {{
        return PACK_DiagnosticMessage(DiagnosticMessage({inner_t}({arglist})));
    }}",
        signature = c_helpers::messages::constructor::sig(message),
        inner_t = message.camelcase_name(),
        arglist = arglist
    )
}
fn variant_getter(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{sig}
    {{
        const DiagnosticMessage *message = (const DiagnosticMessage *)blob;
        const {variant_name} *variant = std::get_if<{variant_name}>(&(message->variant));
        return (const {variant_name}_BLOB*)variant;
    }}",
        sig = c_helpers::messages::variant_getter::sig(message),
        variant_name = message.camelcase_name(),
    )
}
fn getters(message: &lib_ruby_parser_nodes::Message) -> Vec<String> {
    message.fields.map(&|field| {
        format!(
            "{signature}
    {{
        const {variant_name} *variant = (const {variant_name} *)blob;
        return (const {blob_type} *)(&(variant->{field_name}));
    }}",
            signature = c_helpers::messages::getter::sig(message, field),
            variant_name = message.camelcase_name(),
            field_name = c_helpers::messages::fields::field_name(field),
            blob_type = c_helpers::messages::fields::blob_type(field),
        )
    })
}
fn predicate(message: &lib_ruby_parser_nodes::Message) -> String {
    format!(
        "{signature}
    {{
        const DiagnosticMessage *message = (const DiagnosticMessage *)blob;
        return std::holds_alternative<{variant_name}>(message->variant);
    }}",
        signature = c_helpers::messages::type_predicate::sig(message),
        variant_name = message.camelcase_name()
    )
}
